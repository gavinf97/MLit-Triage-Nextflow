<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD with MathML3 v1.3 20210610//EN" "JATS-archivearticle1-3-mathml3.dtd"> 
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.3" xml:lang="en" article-type="research-article"><?DTDIdentifier.IdentifierValue -//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.2 20190208//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName JATS-journalpublishing1.dtd?><?SourceDTD.Version 1.2?><?ConverterInfo.XSLTName jats2jats3.xsl?><?ConverterInfo.Version 1?><?properties open_access?><processing-meta base-tagset="archiving" mathml-version="3.0" table-model="xhtml" tagset-family="jats"><restricted-by>pmc</restricted-by></processing-meta><front><journal-meta><journal-id journal-id-type="nlm-ta">Gigascience</journal-id><journal-id journal-id-type="iso-abbrev">Gigascience</journal-id><journal-id journal-id-type="publisher-id">gigascience</journal-id><journal-title-group><journal-title>GigaScience</journal-title></journal-title-group><issn pub-type="epub">2047-217X</issn><publisher><publisher-name>Oxford University Press</publisher-name></publisher></journal-meta><article-meta><article-id pub-id-type="pmcid">10646871</article-id><article-id pub-id-type="doi">10.1093/gigascience/giad094</article-id><article-id pub-id-type="publisher-id">giad094</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research</subject></subj-group><subj-group subj-group-type="category-taxonomy-collection"><subject>AcademicSubjects/SCI00960</subject><subject>AcademicSubjects/SCI02254</subject></subj-group></article-categories><title-group><article-title>Euler characteristic curves and profiles: a stable shape invariant for big data problems</article-title></title-group><contrib-group><contrib contrib-type="author"><contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0001-5352-3102</contrib-id><name><surname>D&#x00142;otko</surname><given-names>Pawe&#x00142;</given-names></name><aff>
<institution>Dioscuri Centre in Topological Data Analysis, Mathematical Institute, Polish Academy of Sciences</institution>, <addr-line>Warsaw, 00-656</addr-line>, <country country="PL">Poland</country></aff></contrib><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid" authenticated="false">https://orcid.org/0000-0002-3668-8711</contrib-id><name><surname>Gurnari</surname><given-names>Davide</given-names></name><!--dgurnari@impan.pl--><aff>
<institution>Dioscuri Centre in Topological Data Analysis, Mathematical Institute, Polish Academy of Sciences</institution>, <addr-line>Warsaw, 00-656</addr-line>, <country country="PL">Poland</country></aff><xref rid="cor1" ref-type="corresp"/></contrib></contrib-group><author-notes><corresp id="cor1">Correspondence address. Davide Gurnari, Dioscuri Centre in Topological Data Analysis, Mathematical Institute, Polish Academy of Sciences ul. &#x0015a;niadeckich 8 00-656 Warsaw. E-mail: <email>dgurnari@impan.pl</email></corresp></author-notes><pub-date pub-type="collection"><year>2023</year></pub-date><pub-date pub-type="epub" iso-8601-date="2023-11-15"><day>15</day><month>11</month><year>2023</year></pub-date><pub-date pub-type="pmc-release"><day>15</day><month>11</month><year>2023</year></pub-date><volume>12</volume><elocation-id>giad094</elocation-id><history><date date-type="received"><day>11</day><month>8</month><year>2023</year></date><date date-type="rev-recd"><day>25</day><month>9</month><year>2023</year></date><date date-type="accepted"><day>09</day><month>10</month><year>2023</year></date><date date-type="corrected-typeset"><day>15</day><month>11</month><year>2023</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s) 2023. Published by Oxford University Press GigaScience.</copyright-statement><copyright-year>2023</copyright-year><license><ali:license_ref xmlns:ali="http://www.niso.org/schemas/ali/1.0/" specific-use="textmining" content-type="ccbylicense">https://creativecommons.org/licenses/by/4.0/</ali:license_ref><license-p>This is an Open Access article distributed under the terms of the Creative Commons Attribution License (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted reuse, distribution, and reproduction in any medium, provided the original work is properly cited.</license-p></license></permissions><self-uri xlink:href="giad094.pdf"/><abstract><title>Abstract</title><p>Tools of topological data analysis provide stable summaries encapsulating the shape of the considered data. Persistent homology, the most standard and well-studied data summary, suffers a number of limitations; its computations are hard to distribute, and it is hard to generalize to multifiltrations and is computationally prohibitive for big datasets. In this article, we study the concept of Euler characteristics curves for 1-parameter filtrations and Euler characteristic profiles for multiparameter filtrations. While being a weaker invariant in one dimension, we show that Euler characteristic&#x02013;based approaches do not possess some handicaps of persistent homology; we show efficient algorithms to compute them in a distributed way, their generalization to multifiltrations, and practical applicability for big data problems. In addition, we show that the Euler curves and profiles enjoy a certain type of stability, which makes them robust tools for data analysis. Lastly, to show their practical applicability, multiple use cases are considered.</p></abstract><kwd-group kwd-group-type="keywords"><kwd>topological data analysis</kwd><kwd>persistent homology</kwd><kwd>Euler characteristic</kwd><kwd>distributed computations</kwd></kwd-group><funding-group><award-group award-type="grant"><funding-source>
<institution-wrap><institution>Max Planck Society</institution><institution-id institution-id-type="DOI">10.13039/501100004189</institution-id></institution-wrap>
</funding-source></award-group><award-group award-type="grant"><funding-source>
<institution-wrap><institution>Narodowym Centrum Nauki</institution><institution-id institution-id-type="DOI">10.13039/501100004442</institution-id></institution-wrap>
</funding-source></award-group><award-group award-type="grant"><funding-source>
<institution-wrap><institution>Bundesministerium f&#x000fc;r Bildung und Forschung</institution><institution-id institution-id-type="DOI">10.13039/501100002347</institution-id></institution-wrap>
</funding-source></award-group><award-group award-type="grant"><funding-source>
<institution-wrap><institution>University of Warsaw</institution><institution-id institution-id-type="DOI">10.13039/501100006445</institution-id></institution-wrap>
</funding-source></award-group></funding-group><counts><page-count count="16"/></counts></article-meta></front><body><sec sec-type="intro" id="sec1"><title>Introduction</title><p>Topological data analysis since its beginning [<xref rid="bib1" ref-type="bibr">1</xref>, <xref rid="bib2" ref-type="bibr">2</xref>] has brought attention in the data science community. Topological tools, like persistent homology [<xref rid="bib3" ref-type="bibr">3</xref>] and mapper [<xref rid="bib2" ref-type="bibr">2</xref>], were used in multiple tasks in material science [<xref rid="bib4" ref-type="bibr">4&#x02013;6</xref>], medicine [<xref rid="bib7" ref-type="bibr">7</xref>], and many more. In time, persistent homology has been successfully integrated with machine learning pipelines, and mapper became an exploratory data analysis tool. In this work, we will extend on the path of persistent homology. With its successes, attempts were made to apply it in task of big data analysis. However, the progress is minimal. While there exists a single distributed implementation [<xref rid="bib8" ref-type="bibr">8</xref>], it does not scale up and was not extensively used in big data analysis. In practice, mostly various sequential implementations are used [<xref rid="bib9" ref-type="bibr">9</xref>]. To bypass the problem of too large input, a number of sparsification techniques [<xref rid="bib10" ref-type="bibr">10</xref>, <xref rid="bib11" ref-type="bibr">11</xref>] as well as bootstrap [<xref rid="bib12" ref-type="bibr">12</xref>] and zigzag [<xref rid="bib13" ref-type="bibr">13</xref>] approaches were proposed. While they scale up to problems of a certain size, they tend to bypass the big data challenge rather than proposing a solution for it.</p><p>In this article, we extend the tool of classical Euler characteristic and Euler characteristic curves. The new contributions include the following:</p><list list-type="bullet"><list-item><p>A proof of stability of the Euler characteristic curve (ECC) with respect to the 1-Wasserstein distance between persistence diagrams</p></list-item><list-item><p>A generalization of the ECC to the multiparamenter filtration case, with an arbitrary number of parameters, that we denote as the Euler characteristic profile (ECP)</p></list-item><list-item><p>An analysis of the stability of such ECPs</p></list-item><list-item><p>Distributed algorithms to compute the exact ECC for Vietoris&#x02013;Rips and cubical complexes that can be naturally extended to the multiparameter case. An Python implementation of such algorithms is provided as the scikit-learn [<xref rid="bib14" ref-type="bibr">14</xref>] compatible package.</p></list-item><list-item><p>Discussion of methods to compare and vectorize ECCs and ECPs</p></list-item><list-item><p>Examples of applications of the ECC/ECP to real-world data</p></list-item></list><p>Our proposed algorithms are perfectly parallelizable and our software implementation can take advantage of multicore CPUs that are nowadays the standard even in consumer-grade hardware. Moreover, they can also be easily executed on a computer cluster to tackle scenarios when the size of the input data is too large to fit into the system&#x02019;s memory. While we are not aware of any distributed algorithm to compute ECCs of a Vietoris&#x02013;Rips complex, Heiss and Wagner [<xref rid="bib15" ref-type="bibr">15</xref>] describe a streaming algorithm to compute the ECC from cubical complexes, which has also been adapted for GPU computations [<xref rid="bib16" ref-type="bibr">16</xref>]. While their implementation is very fast, we see no straightforward way to generalize it to the multiparameter filtration case. To the best of our knowledge, the concept of ECPs of arbitrary dimension is novel in the literature. There are, however, some works that focus on the bifiltration case, known as Euler characteristic surfaces. It was used in an applied setting by Roy et&#x000a0;al. [<xref rid="bib17" ref-type="bibr">17</xref>] to analyze drying droplets, but no topological background is provided. Beltramo et&#x000a0;al. [<xref rid="bib18" ref-type="bibr">18</xref>] gave a description of Euler characteristic surfaces in the persistence homology framework and applied it to obtain a descriptor of both pointcloud and image-based data. Moreover, they provided a Python implementation of their algorithms, which, however, requires the input bifiltration to be binned. Chen et&#x000a0;al. [<xref rid="bib19" ref-type="bibr">19</xref>] introduced a time-aware multipersistence Euler&#x02013;Poincar&#x000e9; surface to describe dynamical networks and proved its weak <italic toggle="yes">L</italic><sub>1</sub> stability. A recent preprint by Perez [<xref rid="bib20" ref-type="bibr">20</xref>] analyzes the stability of Euler and Betti curves of stochastic processes on compact Riemannian manifolds.</p></sec><sec id="sec2"><title>Euler Characteristic Curves (and Profiles)</title><p>In this section,&#x000a0;we introduce the essential mathematical concepts needed to define Euler characteristic curves and profiles. For an exhaustive presentation, we refer to classic textbooks like [<xref rid="bib21" ref-type="bibr">21</xref>] and [<xref rid="bib3" ref-type="bibr">3</xref>].</p><statement content-type="definition" id="def-st1"><label>Definition 1.</label><p>A <italic toggle="yes">CW</italic> or <italic toggle="yes">cell complex X</italic> is a topological space that can be built up starting from a discrete set <italic toggle="yes">X</italic><sup>0</sup> of 0-dimensional cells and then inductively creating the <italic toggle="yes">n</italic>-skeleton <italic toggle="yes">X</italic><sup><italic toggle="yes">n</italic></sup> by attaching <italic toggle="yes">n</italic>-cells to <italic toggle="yes">X</italic><sup><italic toggle="yes">n</italic> &#x02212; 1</sup> along their boundary. The process can be stopped at some finite dimension or can continue indefinitely. A subset <italic toggle="yes">A</italic>&#x02286;<italic toggle="yes">X</italic> is a <italic toggle="yes">subcomplex</italic> of <italic toggle="yes">X</italic> if, with each cell of <italic toggle="yes">A</italic>, all its lower-dimensional cells enter <italic toggle="yes">A</italic>.</p></statement><statement content-type="remark" id="rem-st2"><label>Remark 1.</label><p>Since we are interested in applying this machinery to analyze real-world data, we will always assume that our complexes are finite.</p></statement><p>While the theory can be built in the general CW complex setting, the algorithms we present in the&#x000a0;Algorithms section are specific to 2 different specializations that are used to represent different types of data: simplicial and cubical complexes.</p><statement content-type="definition" id="def-st3"><label>Definition 2.</label><p>An <italic toggle="yes">abstract simplicial complex</italic> is a finite collection of sets <italic toggle="yes">K</italic> such that &#x003c3; &#x02208; <italic toggle="yes">K</italic> and &#x003c4;&#x02286;&#x003c3; implies &#x003c4; &#x02208; <italic toggle="yes">K</italic>. The sets in <italic toggle="yes">K</italic> are called <italic toggle="yes">simplicies</italic>, and the <italic toggle="yes">dimension</italic> of a simplex is <italic toggle="yes">dim</italic>(&#x003c3;) = <italic toggle="yes">card</italic>(&#x003c3;) &#x02212; 1. We will often refer to 0-simplices as <italic toggle="yes">vertices</italic> and to 1-simplices as <italic toggle="yes">edges</italic>. Given a simplex <italic toggle="yes">s</italic> = {<italic toggle="yes">v</italic><sub>0</sub>, &#x02026;, <italic toggle="yes">v</italic><sub><italic toggle="yes">k</italic></sub>}, its <italic toggle="yes">boundary</italic> is <inline-formula><tex-math id="TM0001" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\partial s = \sum _{i=0}^{k} (-1)^i \lbrace v_0,\ldots ,\hat{v_i},\ldots ,v_k\rbrace$\end{document}</tex-math></inline-formula>, where <inline-formula><tex-math id="TM0002" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\hat{v_i}$\end{document}</tex-math></inline-formula> denotes that the vertex <italic toggle="yes">v</italic><sub><italic toggle="yes">i</italic></sub> is removed from the simplex. Simplices <inline-formula><tex-math id="TM0003" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\lbrace v_0,\ldots ,\hat{v_i},\ldots ,v_k\rbrace _{i=0}^k$\end{document}</tex-math></inline-formula> are in the boundary of <italic toggle="yes">s</italic>.</p></statement><p>There are different ways of obtaining an abstract simplicial complex from pointcloud data such as the &#x0010c;ech, the Vietoris&#x02013;Rips, and the Alpha constructions [<xref rid="bib3" ref-type="bibr">3</xref>], and in the&#x000a0;Vietoris&#x02013;Rips complexes section, we describe the Vietoris&#x02013;Rips construction.</p><statement content-type="definition" id="def-st4"><label>Definition 3.</label><p>An <italic toggle="yes">elementary interval</italic> is a subset of <inline-formula><tex-math id="TM0004" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathbb {R}$\end{document}</tex-math></inline-formula> of the type <italic toggle="yes">I</italic> = [<italic toggle="yes">l, l</italic> + 1] or <italic toggle="yes">I</italic> = [<italic toggle="yes">l, l</italic>], for some integer <italic toggle="yes">l</italic>. The first type is called a nondegenerate interval while the second is a degenerate interval. An <italic toggle="yes">elementary cube C</italic> is a product of elementary intervals <italic toggle="yes">C</italic> = <italic toggle="yes">I</italic><sub>1</sub> &#x000d7; &#x022c5;&#x022c5;&#x022c5; &#x000d7; <italic toggle="yes">I</italic><sub><italic toggle="yes">n</italic></sub>, and its dimension is the number of nondegenerate intervals in the product. The <italic toggle="yes">boundary</italic> of an elementary interval is &#x02202;[<italic toggle="yes">l, l</italic> + 1] = [<italic toggle="yes">l</italic> + 1, <italic toggle="yes">l</italic> + 1] + [<italic toggle="yes">l, l</italic>] and &#x02202;[<italic toggle="yes">l, l</italic>] = 0. The boundary of an elementary cube is then defined as <inline-formula><tex-math id="TM0005" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\partial C = \partial (I_1 \times \cdots \times I_n) = \sum _{i=1}^n I_1 \times \cdots \times \partial I_i \times \cdots \times I_n$\end{document}</tex-math></inline-formula>. Similarly to the simplicial complex case, a <italic toggle="yes">cubical complex K</italic> is a collection of elementary cubes closed under operation of taking boundary.</p></statement><p>One of most common use cases of cubical complexes involves image data. In section 16 "Cubical complexes"&#x000a0; we describe how to build a filtered cubical complex from an <italic toggle="yes">n</italic>-dimensional image by identifying the image&#x02019;s pixels with top dimensional cells.</p><p>In what follows, we will refer to simplices and cubes as elements of a simplicial or a cubical complex jointly as <italic toggle="yes">cells</italic> in a <italic toggle="yes">cell complex</italic>. A cell &#x003c4; is said to be a <italic toggle="yes">face</italic> of &#x003c3; if &#x003c4; is in the boundary of &#x003c3;.</p><statement content-type="definition" id="def-st5"><label>Definition 4.</label><p>Let <italic toggle="yes">K</italic> be a cell complex and <italic toggle="yes">d</italic> a dimension. A <italic toggle="yes">d-chain</italic> is a formal sum of <italic toggle="yes">d</italic>-cells in <italic toggle="yes">K</italic>, namely, <italic toggle="yes">c</italic> = &#x02211;<italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub>&#x003c3;<sub><italic toggle="yes">i</italic></sub>, where the &#x003c3;<sub><italic toggle="yes">i</italic></sub> are the <italic toggle="yes">d</italic>-cells and the <italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub> are the coefficients.</p></statement><p>There are many possible choices for the group of coefficients. A standard approach in computational topology is to use <italic toggle="yes">modulo 2 coefficients</italic>, that is, the <italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub> can be either 0 or 1 and satisfy 1 + 1 = 0. (Using modulo 2 coefficients allows us to get rid of the ( &#x02212; 1)<sup><italic toggle="yes">i</italic></sup> in the definition of the boundary in <xref rid="def-st3" ref-type="statement">2</xref>.) Other options include integer, rational, or real coefficients.</p><p>Two <italic toggle="yes">d</italic>-chains can be added component-wise. Namely, given <italic toggle="yes">c</italic> = &#x02211;<italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub>&#x003c3;<sub><italic toggle="yes">i</italic></sub> and <italic toggle="yes">c</italic>&#x02032; = &#x02211;<italic toggle="yes">b</italic><sub><italic toggle="yes">i</italic></sub>&#x003c3;<sub><italic toggle="yes">i</italic></sub>, <italic toggle="yes">c</italic> + <italic toggle="yes">c</italic>&#x02032; = &#x02211;(<italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub> + <italic toggle="yes">b</italic><sub><italic toggle="yes">i</italic></sub>)&#x003c3;<sub><italic toggle="yes">i</italic></sub>. Therefore, we can define the <italic toggle="yes">group of d-chains</italic><inline-formula><tex-math id="TM0006" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {C}_d = \boldsymbol {C}_d(K)$\end{document}</tex-math></inline-formula>. The boundary of a <italic toggle="yes">d</italic>-chain is the sum of the boundaries of its cells &#x02202;<italic toggle="yes">c</italic> = &#x02211;<italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub>&#x02202;&#x003c3;<sub><italic toggle="yes">i</italic></sub>, which is a (<italic toggle="yes">d</italic> &#x02212; 1)&#x02013;chain. Since the boundary commutes with the addition operation, we can define, for each dimension <italic toggle="yes">d</italic>, the <italic toggle="yes">boundary homomorphism</italic><inline-formula><tex-math id="TM0007" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\partial _d : \boldsymbol {C}_d \rightarrow \boldsymbol {C}_{d-1}$\end{document}</tex-math></inline-formula>.</p><p>A <italic toggle="yes">d-cycle</italic> is a <italic toggle="yes">d</italic>-chain with empty boundary &#x02202;<italic toggle="yes">c</italic> = 0. A <italic toggle="yes">d-boundary</italic> is a <italic toggle="yes">d</italic>-chain that is the boundary of a (<italic toggle="yes">d</italic> + 1)&#x02013;chain. Since &#x02202; commutes with addition, we have the <italic toggle="yes">group of d-cycles</italic><inline-formula><tex-math id="TM0008" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {Z_d} = \boldsymbol {Z}_d(K)$\end{document}</tex-math></inline-formula> and the <italic toggle="yes">group of d-boundaries</italic><inline-formula><tex-math id="TM0009" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {B_d} = \boldsymbol {B}_d(K)$\end{document}</tex-math></inline-formula>. It is a fundamental result that &#x02202;<sub><italic toggle="yes">d</italic></sub>&#x02202;<sub><italic toggle="yes">d</italic> + 1</sub><italic toggle="yes">c</italic> = 0 for every dimension <italic toggle="yes">d</italic> and every (<italic toggle="yes">d</italic> + 1)&#x02013;chain <italic toggle="yes">c</italic>. This means that the boundary of a boundary is always zero; in other words, <inline-formula><tex-math id="TM0010" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {B}_d$\end{document}</tex-math></inline-formula> is a subgroup of <inline-formula><tex-math id="TM0011" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {Z}_d$\end{document}</tex-math></inline-formula>. This leads to the following definition.</p><statement content-type="definition" id="def-st6"><label>Definition 5.</label><p>The <italic toggle="yes">d</italic>th <italic toggle="yes">homology group</italic> is the <italic toggle="yes">d</italic>th cycle group modulo the <italic toggle="yes">d</italic>th boundary group, <inline-formula><tex-math id="TM0012" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {H}_d = \boldsymbol {Z}_d / \boldsymbol {B}_d$\end{document}</tex-math></inline-formula>. The <italic toggle="yes">d</italic>th <italic toggle="yes">Betti number</italic> is the rank of this group, <inline-formula><tex-math id="TM0013" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\beta _d = \text{rank}(\boldsymbol {H}_d)$\end{document}</tex-math></inline-formula>.</p></statement><statement content-type="definition" id="def-st7"><label>Definition 6.</label><p>Let <italic toggle="yes">K</italic> be a cell complex. A <italic toggle="yes">filtration</italic> of <italic toggle="yes">K</italic> is a sequence of nested subcomplexes &#x02205; = <italic toggle="yes">K</italic><sub>0</sub>&#x02286;<italic toggle="yes">K</italic><sub>1</sub>&#x02286;&#x022c5;&#x022c5;&#x022c5;&#x02286;<italic toggle="yes">K</italic><sub><italic toggle="yes">n</italic></sub> = <italic toggle="yes">K</italic>. Such a sequence is finite for finite complexes. It can be obtained by means of a <italic toggle="yes">filtration function</italic> over <italic toggle="yes">K</italic>, a monotonic nondecreasing function <inline-formula><tex-math id="TM0014" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$f: K \rightarrow \mathbb {R}$\end{document}</tex-math></inline-formula> such that <italic toggle="yes">f</italic>(&#x003c4;) &#x02264; <italic toggle="yes">f</italic>(&#x003c3;) if &#x003c4; is a face of &#x003c3;. Note that every <italic toggle="yes">sublevel set K</italic><sub><italic toggle="yes">t</italic></sub> = <italic toggle="yes">f</italic><sup>&#x02212;1</sup>( &#x02212; &#x0221e;, <italic toggle="yes">t</italic>] is a subcomplex of <italic toggle="yes">K</italic> for every <inline-formula><tex-math id="TM0015" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$t \in \mathbb {R}$\end{document}</tex-math></inline-formula>.</p></statement><p>For each dimension <italic toggle="yes">d</italic>, such a filtration corresponds to a sequence of homology groups <inline-formula><tex-math id="TM0016" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$0 = \boldsymbol {H}_d(K_0) \rightarrow \boldsymbol {H}_d(K_1) \rightarrow \cdots \rightarrow \boldsymbol {H}_d(K_n) = \boldsymbol {H}_d(K)$\end{document}</tex-math></inline-formula>. For every <italic toggle="yes">i</italic> &#x0003c; <italic toggle="yes">j</italic>, the homomorphism <inline-formula><tex-math id="TM0017" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$f_d^{i,j} : \boldsymbol {H}_d(K_i) \rightarrow \boldsymbol {H}_d(K_j)$\end{document}</tex-math></inline-formula> is induced from the inclusion map of <italic toggle="yes">K</italic><sub><italic toggle="yes">i</italic></sub> into <italic toggle="yes">K</italic><sub><italic toggle="yes">j</italic></sub>.</p><statement content-type="definition" id="def-st8"><label>Definition 7.</label><p>The <italic toggle="yes">d</italic>th <italic toggle="yes">persistent homology groups</italic> are the images of the homomorphisms <inline-formula><tex-math id="TM0018" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\boldsymbol {H}_d^{i,j} = \text{im}f_d^{i,j}$\end{document}</tex-math></inline-formula>. The ranks of these groups are the <italic toggle="yes">d</italic>th <italic toggle="yes">persistent Betti numbers</italic><inline-formula><tex-math id="TM0019" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\beta _d^{i,j} = \text{rank}(\boldsymbol {H}_d^{i,j})$\end{document}</tex-math></inline-formula>.</p></statement><p>Intuitively, the <italic toggle="yes">d</italic>th persistent Betti number <inline-formula><tex-math id="TM0020" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\beta _d^{i,j}$\end{document}</tex-math></inline-formula> counts how may homology classes of <italic toggle="yes">K</italic><sub><italic toggle="yes">i</italic></sub> are still present in <italic toggle="yes">K</italic><sub><italic toggle="yes">j</italic></sub>. There are 2 scenarios in which a homology class from <italic toggle="yes">K</italic><sub><italic toggle="yes">i</italic></sub> may not be present in <italic toggle="yes">K</italic><sub><italic toggle="yes">j</italic></sub>&#x02014;it may become trivial or identical (homologous) to a class that was created earlier.</p><statement content-type="definition" id="def-st9"><label>Definition 8.</label><p>The <italic toggle="yes">k</italic>th-dimensional <italic toggle="yes">persistence diagram</italic> of a filtered complex <italic toggle="yes">K, Dgm</italic><sub><italic toggle="yes">k</italic></sub>(<italic toggle="yes">K</italic>) is a multiset of points in the extended real plane <inline-formula><tex-math id="TM0021" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(\mathbb {R} \cup \lbrace \infty \rbrace ) \times (\mathbb {R} \cup \lbrace \infty \rbrace )$\end{document}</tex-math></inline-formula>. The multiplicity of each point (<italic toggle="yes">b, d</italic>) indicates the number of independent <italic toggle="yes">k</italic>-dimensional classes that are born at filtration value <italic toggle="yes">b</italic> and die at filtration value <italic toggle="yes">d</italic>.</p></statement><p>All the points on the diagonal are always included, with countable multiplicity, in a persistence diagram, in order to make sense of the following.</p><statement content-type="definition" id="def-st10"><label>Definition 9.</label><p>A <italic toggle="yes">matching</italic> of 2 persistence diagrams <italic toggle="yes">C</italic> and <italic toggle="yes">D</italic> is a bijection &#x003b7;: <italic toggle="yes">C</italic> &#x02192; <italic toggle="yes">D</italic> possibly to or from points on the diagonal.</p></statement><statement content-type="definition" id="def-st11"><label>Definition 10.</label><p>The 1-Wasserstein distance between two <italic toggle="yes">k</italic>-dimensional persistence diagrams <italic toggle="yes">C, D</italic> is
<disp-formula><tex-math id="TM0022" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
W_1(C, D) = \inf _{\eta :C \rightarrow D} \sum _{(b,d) \in C} \left \|(b,d) - \eta (b, d) \right \|_\infty ^1,
\end{eqnarray*}\end{document}</tex-math></disp-formula>where &#x003b7; is a matching of <italic toggle="yes">C</italic> and <italic toggle="yes">D</italic>.</p></statement><statement content-type="definition" id="def-st12"><label>Definition 11.</label><p>The <italic toggle="yes">Euler characteristic</italic> of a cell complex <italic toggle="yes">K</italic> is the alternating sum of the number of its cells in each dimension
<disp-formula><tex-math id="TM0023" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\chi (K) = \sum _d (-1)^d |K^d| \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><p>where <italic toggle="yes">K</italic><sup><italic toggle="yes">d</italic></sup> denotes the <italic toggle="yes">d-</italic>dimensional cells in <italic toggle="yes">K</italic>. Thanks to the Euler&#x02013;Poincar&#x000e9; formula, the Euler characteristic can also be expressed as the alternating sum of the Betti numbers, the ranks of the cell complex&#x02019;s homology groups: &#x003c7;(<italic toggle="yes">K</italic>) = &#x02211;<sub><italic toggle="yes">d</italic></sub>( &#x02212; 1)<sup><italic toggle="yes">d</italic></sup>&#x003b2;<sub><italic toggle="yes">d</italic></sub>(<italic toggle="yes">K</italic>) [<xref rid="bib3" ref-type="bibr">3</xref>].</p><statement content-type="definition" id="def-st13"><label>Definition 12.</label><p>Let us consider a filtered complex <italic toggle="yes">K</italic> with filtration function <inline-formula><tex-math id="TM0024" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$f: K \rightarrow \mathbb {R}$\end{document}</tex-math></inline-formula>. We can define its <italic toggle="yes">Euler characteristic curve</italic> as a function that assign an Euler number &#x003c7; for each filtration level <inline-formula><tex-math id="TM0025" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$t \in \mathbb {R}$\end{document}</tex-math></inline-formula><disp-formula><tex-math id="TM0026" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
ECC(K, t) = \chi (K_t) \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p><p>Recall that <italic toggle="yes">K</italic><sub><italic toggle="yes">t</italic></sub> = <italic toggle="yes">f</italic><sup>&#x02212;1</sup>( &#x02212; &#x0221e;, <italic toggle="yes">t</italic>] is a subcomplex of <italic toggle="yes">K</italic> for every <inline-formula><tex-math id="TM0027" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$t \in \mathbb {R}$\end{document}</tex-math></inline-formula>.</p></statement><p>We are now interested in extending the concept of the Euler characteristic curve to the more general multidimensional persistence setting [<xref rid="bib22" ref-type="bibr">22</xref>]. In order to do so, we need to generalize Definition&#x000a0;<xref rid="def-st7" ref-type="statement">6</xref> to families of nested complexes indexed by posets. While multidimensional persistence is a vibrant and active research topic, in this article, we will only make use of the basic concepts. We refer the interested reader to [<xref rid="bib23" ref-type="bibr">23</xref>] for a modern introduction to the topic.</p><statement content-type="definition" id="def-st14"><label>Definition 13.</label><p>Let <italic toggle="yes">K</italic> be a cell complex and <italic toggle="yes">P</italic> a poset. A <italic toggle="yes">P-indexed filtration</italic> on <italic toggle="yes">K</italic> is a family of nested complexes such that <italic toggle="yes">K</italic><sub><italic toggle="yes">x</italic></sub> is a subcomplex of <italic toggle="yes">K</italic> for each <italic toggle="yes">x</italic> &#x02208; <italic toggle="yes">P</italic>, and <italic toggle="yes">K</italic><sub><italic toggle="yes">x</italic></sub>&#x02286;<italic toggle="yes">K</italic><sub><italic toggle="yes">y</italic></sub> whenever <italic toggle="yes">x</italic> &#x02264; <italic toggle="yes">y</italic>. If <italic toggle="yes">P</italic> = <italic toggle="yes">T</italic><sub>1</sub> &#x000d7; &#x022c5;&#x022c5;&#x022c5; &#x000d7; <italic toggle="yes">T</italic><sub><italic toggle="yes">n</italic></sub> where each <italic toggle="yes">T</italic><sub><italic toggle="yes">i</italic></sub> is a totally ordered set, we call a <italic toggle="yes">multiparameter</italic> or <italic toggle="yes">n-parameter filtration</italic>.</p></statement><p>It is a natural question to ask whether the idea of sublevel sets of a filtration function could be extended too. In general, this is not the case. It can be achieved only when each cell of <italic toggle="yes">K</italic> first appears in the filtration at some unique minimal index in <italic toggle="yes">P</italic>.</p><statement content-type="definition" id="def-st15"><label>Definition 14.</label><p>Let <italic toggle="yes">K</italic> be a cell complex, <italic toggle="yes">P</italic> a poset, and <italic toggle="yes">f</italic> a function <italic toggle="yes">f: K</italic> &#x02192; <italic toggle="yes">P</italic>. The <italic toggle="yes">sublevel filtration</italic> of <italic toggle="yes">f</italic> is a family of complexes of the type
<disp-formula><tex-math id="TM0028" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
K_p = \lbrace \sigma \in K \, | \, f(\sigma ) \le p \rbrace \, .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p><p>A filtration isomorphic to a sublevel filtration is said to be <italic toggle="yes">1-critical</italic>. A filtration that is not 1-critical is said to be <italic toggle="yes">multicritical</italic>.</p></statement><statement content-type="definition" id="def-st16"><label>Definition 15.</label><p>The ECP of a <italic toggle="yes">P</italic>-filtered complex <italic toggle="yes">K</italic> is a function that is assigned to any value <italic toggle="yes">p</italic> &#x02208; <italic toggle="yes">P</italic> the Euler characteristic of the corresponding subcomplex <italic toggle="yes">K</italic><sub><italic toggle="yes">p</italic></sub>.
<disp-formula><tex-math id="TM0029" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
ECP(K, p) = \chi (K_p) \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><p>For the rest of the article, we will focus on the case <inline-formula><tex-math id="TM0030" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$P=\mathbb {R}^n$\end{document}</tex-math></inline-formula>.</p><statement content-type="remark" id="rem-st17"><label>Remark 2.</label><p>The 2-dimensional ECP already appeared in the literature, and it is known as Euler characteristic surface [<xref rid="bib17" ref-type="bibr">17&#x02013;19</xref>]. It was, however, defined only for the Cartesian product of two 1-parameter filtrations, and it is treated as a matrix in the following way. Given a bifiltering function <inline-formula><tex-math id="TM0031" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$F: K \rightarrow \mathbb {R}^2$\end{document}</tex-math></inline-formula> over <italic toggle="yes">K</italic> and a set of threshold values <inline-formula><tex-math id="TM0032" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$I = \lbrace (a_i, b_j) \, | \, 1 \le i \le m , 1 \le j \le n\rbrace$\end{document}</tex-math></inline-formula>, the Euler characteristic surface is the <italic toggle="yes">m</italic> &#x000d7; <italic toggle="yes">n</italic> integer valued matrix <italic toggle="yes">S</italic> whose entries are <italic toggle="yes">S</italic><sub><italic toggle="yes">ij</italic></sub> = &#x003c7;(<italic toggle="yes">K</italic><sub><italic toggle="yes">ij</italic></sub>) = &#x003c7;(<italic toggle="yes">F</italic><sup>&#x02212;1</sup>(( &#x02212; &#x0221e;, <italic toggle="yes">a</italic><sub><italic toggle="yes">i</italic></sub>] &#x000d7; ( &#x02212; &#x0221e;, <italic toggle="yes">b</italic><sub><italic toggle="yes">j</italic></sub>]). This matrix representation corresponds to sampling the 2-dimensional profile on the grid given by <italic toggle="yes">I</italic>. In general, the choice of such grid is not unique, and the spacing of such grid may not be constant. This makes it difficult to define a general notion of distance between Euler characteristic surface matrices. For this reason ,we think it is more natural to define the Euler characteristic profile as a function like in <xref rid="def-st16" ref-type="statement">15</xref> and look for stability results in this setting.</p></statement></sec><sec id="sec3"><title>Stability of Euler Characteristic Curves and Profiles</title><p>The goal of this section&#x000a0;is to find a bound for the distance between Euler characteristic curves by some known topological quantity of the pointcloud that is robust with respect to small perturbations of the pointcloud. This way, the stability of Euler characteristic curves is obtained.</p><sec id="sec3-1"><title>Euler characteristic curves</title><p>Since ECCs are are piecewise constant functions, we consider the <italic toggle="yes">L</italic><sub>1</sub> distances between them (Fig. <xref rid="fig1" ref-type="fig">1</xref>).</p><statement content-type="definition" id="def-st18"><label>Definition 16.</label><p>Let <italic toggle="yes">K</italic><sub>1</sub> and <italic toggle="yes">K</italic><sub>2</sub> be 2 filtered cell complexes. The <italic toggle="yes">L</italic><sub>1</sub> distance between their Euler characteristic curves is
<disp-formula><tex-math id="TM0033" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
{\left \|ECC(K_1, t) - ECC(K_2, t) \right \|_1} = {\int_{\mathbb R} \left |ECC(K_1, t) - ECC(K_2, t) \right |} dt \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><fig position="float" id="fig1"><label>Figure 1:</label><caption><p>Two Euler characteristic curves in red and green. The absolute value of their difference is highlighted in shaded gray.</p></caption><graphic xlink:href="giad094fig1" position="float"/></fig><p>The proof presented in this section&#x000a0;is inspired by the stability result for persistence functions by Chung and Lawson [<xref rid="bib24" ref-type="bibr">24</xref>], who analyzed the stability of a wide class of persistence curves and obtained a general bound (see Theorem 1 in [<xref rid="bib24" ref-type="bibr">24</xref>]). However, trying to specialize this result to the simple Betti curve case leads to a term that depends on the number of points in the persistence diagram. Hence, the authors claim that Betti curves are unstable.</p><p>We will instead carry out the proof focusing exclusively on Betti curves, and by doing so, a stability result can be obtained.</p><statement content-type="definition" id="def-st19"><label>Definition 17.</label><p>Let <italic toggle="yes">K</italic> be a cell complex with filtration function <italic toggle="yes">f</italic>. Its <italic toggle="yes">k</italic>th Betti curve is a function that assigns to each filtration level the <italic toggle="yes">k</italic>th Betti number of the corresponding subcomplex.
<disp-formula><tex-math id="TM0034" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\beta _k(K, t) = \beta _k(K_t) \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><p>Let now <italic toggle="yes">D</italic> be the <italic toggle="yes">k</italic>-dimensional persistence diagram obtained from a filtered complex <italic toggle="yes">K</italic>. The fundamental lemma of persistent homology [<xref rid="bib3" ref-type="bibr">3</xref>] states that the <italic toggle="yes">k</italic>th Betti number of the subcomplex <italic toggle="yes">K</italic><sub><italic toggle="yes">t</italic></sub> can be obtained by counting the points in the diagram that lie in the box <inline-formula><tex-math id="TM0035" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(x,y) \, | \, x \le t \lt y$\end{document}</tex-math></inline-formula>,</p><disp-formula>
<tex-math id="TM0036" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\beta _k(K_t) = \#[(b,d) \in D \, | \, b \le t \lt d] .
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><p>We can reformulate this statement by assigning to each point (<italic toggle="yes">b, d</italic>) in the diagram its indicator function in the interval [<italic toggle="yes">b, d</italic>), <italic toggle="yes">I</italic><sub>[<italic toggle="yes">b, d</italic>)</sub>(<italic toggle="yes">t</italic>) = 1 if <italic toggle="yes">t</italic> &#x02208; [<italic toggle="yes">b, d</italic>) and 0 otherwise. These indicator functions are exactly the bars in the barcode representation. By doing so, we can define the <italic toggle="yes">k</italic>-dimensional Betti curve as the step function obtained by summing up all these indicator functions.</p><statement content-type="definition" id="def-st20"><label>Definition 18.</label><p>The <italic toggle="yes">k</italic>th Betti curve for a persistence diagram <italic toggle="yes">D</italic> with finitely many off-diagonal points is
<disp-formula><tex-math id="TM0037" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\beta _k(D, t) = \sum _{(b,d) \in D} I_{[b,d)}(t) .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><statement content-type="proposition" id="pro-st21"><label>Proposition 1.</label><p>Let <italic toggle="yes">C</italic> and <italic toggle="yes">D</italic> be 2 <italic toggle="yes">k</italic>-dimensional persistence diagrams. Their Betti curves are stable with respect to the 1-Wasserstein distance,
<disp-formula id="equ1"><label>(1)</label><tex-math id="TM0038" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| \beta _k(C, t) - \beta _k(D, t)\right \| _1 \le 2W_1(C,D).
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><statement content-type="proof"><label>Proof.</label><p>Let us consider 2 <italic toggle="yes">k</italic>-dimensional persistence diagrams <italic toggle="yes">C, D</italic> and assume the optimal matching under the 1-Wasserstein distance is known. Moreover, let us index the points in each diagram as <inline-formula><tex-math id="TM0039" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(b_i^C, d_i^C)$\end{document}</tex-math></inline-formula> and <inline-formula><tex-math id="TM0040" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(b_i^D, d_i^D)$\end{document}</tex-math></inline-formula> so that points with matching indices are paired under the optimal matching. The case when points from 1 diagram are matched to the diagonal is described in case 2. We can then write the difference between the 2 Betti curves as the following:
<disp-formula><tex-math id="TM0041" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| \beta _k(C, t) - \beta _k(D, t)\right \| _1 &#x00026;= \left \| \sum _i I_{[b_i^C,d_i^C)}(t) - I_{[b_i^D,d_i^D)} (t)\right\| _1 \\
&#x00026; \le \sum _i \left \| I_{[b_i^C,d_i^C)}(t) - I_{[b_i^D,d_i^D)} (t)\right \| _1 .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p><p>Let us focus on a single term of the sum, <inline-formula><tex-math id="TM0042" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\left \| h_i(t)\right \| = \left \| I_{[b_i^C,d_i^C)}(t) - I_{[b_i^D,d_i^D)} (t)\right \| _1$\end{document}</tex-math></inline-formula>. Then, one of the following cases has to hold:</p><p>
<underline>Case 1:</underline>
<inline-formula>
<tex-math id="TM0043" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$b_i^C \le b_i^D \le d_i^C \le d_i^D$\end{document}</tex-math>
</inline-formula> (Fig. <xref rid="fig2" ref-type="fig">2</xref>).
<disp-formula><tex-math id="TM0044" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| h_i(t)\right \| &#x00026;= \int _{b_i^C}^{b_i^D}{\left | I_{[b_i^C,d_i^C)}(t)\right | dt} + \int _{b_i^D}^{d_i^C}{\left | I_{[b_i^C,d_i^C)}(t) - I_{[b_i^D,d_i^D)}(t)\right | dt } \\
&#x00026; \qquad +\int _{d_i^C}^{d_i^D}{\left | I_{[b_i^D,d_i^D)}(t)\right | dt} \\
&#x00026;= \int _{b_i^C}^{b_i^D}{\left | 1\right | dt} + \int _{b_i^D}^{d_i^C}{\left | 1-1\right | dt } + \int _{d_i^C}^{d_i^D}{\left | 1\right | dt} \\
&#x00026;= \left | b_i^D - b_i^C\right | + \left | d_i^D - d_i^C\right | \\
&#x00026;\le 2 \max (\left | b_i^D - b_i^C\right | , \left | d_i^D - d_i^C\right | ) .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p><p>
<underline>Case 2:</underline>
<inline-formula>
<tex-math id="TM0045" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$b_i^C \le b_i^D \le d_i^D \le d_i^C$\end{document}</tex-math>
</inline-formula> (Fig. <xref rid="fig3" ref-type="fig">3</xref>).
<disp-formula><tex-math id="TM0046" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| h_i(t)\right \| &#x00026;= \int _{b_i^C}^{b_i^D}{\left | 1\right | dt} + \int _{b_i^D}^{d_i^D}{\left | 1-1\right | dt } + \int _{d_i^D}^{d_i^C}{\left | 1\right | dt} \\
&#x00026;= \left | b_i^D - b_i^C\right | + \left | d_i^C - d_i^D\right | \\
&#x00026;\le 2 \max (\left | b_i^D - b_i^C\right | , \left | d_i^D - d_i^C\right | ) .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p><p>The matching of one point <inline-formula><tex-math id="TM0047" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(b_i^C, d_i^C) \in C$\end{document}</tex-math></inline-formula> with a point in the diagonal of <italic toggle="yes">D</italic> is a degenerate case 2 with <inline-formula><tex-math id="TM0048" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$b_i^C \le b_i^D = d_i^D \le d_i^C$\end{document}</tex-math></inline-formula>. Note that, because of this, <italic toggle="yes">C</italic> and <italic toggle="yes">D</italic> are not required to have the same number of off-diagonal points.</p><p>
<underline>Case 3:</underline>
<inline-formula>
<tex-math id="TM0049" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$b_i^C \le d_i^C \le b_i^D \le d_i^D$\end{document}</tex-math>
</inline-formula> (Fig. <xref rid="fig4" ref-type="fig">4</xref>)</p><p>This case will never happen as a better matching can always be obtained by matching both points to the diagonal, which is a degenerate case 2.</p><p>We have that <inline-formula><tex-math id="TM0050" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\left \| h_i(t)\right \| \le 2\max (\left | b_i^D - b_i^C\right | , \left | d_i^D - d_i^C\right | )$\end{document}</tex-math></inline-formula> holds for every <italic toggle="yes">i</italic>. We can then write the difference between 2 Betti curves as
<disp-formula><tex-math id="TM0051" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| \beta _k(C, t) - \beta _k(D, t)\right \| _1 &#x00026;\le \sum _i \left \| I_{[b_i^C,d_i^C)}(t) - I_{[b_i^D,d_i^D)} (t)\right \| _1 \\
&#x00026;\le \sum _i{2 \max (\left | b_i^D - b_i^C\right | , \left | d_i^D - d_i^C\right | ) } \\
&#x00026;= 2W_1(C, D) .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><fig position="float" id="fig2"><label>Figure 2:</label><caption><p>Case 1.</p></caption><graphic xlink:href="giad094fig2" position="float"/></fig><fig position="float" id="fig3"><label>Figure 3:</label><caption><p>Case 2.</p></caption><graphic xlink:href="giad094fig3" position="float"/></fig><fig position="float" id="fig4"><label>Figure 4:</label><caption><p>Case 3.</p></caption><graphic xlink:href="giad094fig4" position="float"/></fig><p>Thanks to the Euler&#x02013;Poincar&#x000e9; formula, the Euler characteristic curve of a filtered complex <italic toggle="yes">K</italic> can be obtained as the alternating sum of its Betti curves.</p><disp-formula>
<tex-math id="TM0052" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
ECC(K,t) = \sum _k (-1)^k \beta _k(K,t).
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><p>A stability result for the ECCs can be immediately derived from 1 assuming that the complex <italic toggle="yes">K</italic> has nonzero persistence diagrams in a finite number of dimensions, each of them containing a finite amount of off-diagonal points.</p><statement content-type="proposition" id="pro-st22"><label>Proposition 2.</label><p>Let <italic toggle="yes">X</italic> and <italic toggle="yes">Y</italic> be 2 filtered cell complexes. The <italic toggle="yes">L</italic><sub>1</sub> difference between the Euler characteristic curves of <italic toggle="yes">X</italic> and <italic toggle="yes">Y</italic> is bounded by the sum of the 1-Wasserstein distances between the corresponding <italic toggle="yes">k</italic>-dimensional persistence diagrams <italic toggle="yes">Dgm</italic><sub><italic toggle="yes">k</italic></sub>(<italic toggle="yes">X</italic>), <italic toggle="yes">Dgm</italic><sub><italic toggle="yes">k</italic></sub>(<italic toggle="yes">Y</italic>).
<disp-formula id="update1698038310001"><label>(2)</label><tex-math id="TM0053" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| ECC(X, t) - ECC(Y, t)\right \| _1 \le \sum _{k} 2 W_1(Dgm_k(X), Dgm_k(Y)) ,
\end{eqnarray*}\end{document}</tex-math></disp-formula>where the sum is over all dimensions in which the persistence diagrams are nonempty.</p></statement><statement content-type="proof"><label>Proof.</label><p>It is an immediate consequence of <xref rid="pro-st21" ref-type="statement">1</xref> and the triangular inequality.
<disp-formula><tex-math id="TM0054" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\left \| ECC(X, t){-}ECC(Y, t)\right \| _1 &#x00026;=&#x00026; \left \| \sum _{k=0}^n (-1)^k ( \beta _k(Dgm_k(X), t){-}\beta _k(Dgm_k(Y), t))\right \| _1 \\
&#x00026;&#x00026; \le \sum _{k=0}^n \left \| \beta _k(Dgm_k(X), t){-}\beta _k(Dgm_k(Y), t)\right \| _1\\
&#x00026;&#x00026; \le \sum _{k=0}^n 2 W_1(Dgm_k(X), Dgm_k(Y)) .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><p>The above Proposition&#x000a0;<xref rid="update1698038310001" ref-type="disp-formula">2</xref> is in explicit contrast with the claim that the Euler characteristic curve is unstable. In addition to the already mentioned work by Chung and Lawson [<xref rid="bib25" ref-type="bibr">24</xref>], a similar statement can be found in [<xref rid="bib18" ref-type="bibr">18</xref>] and [<xref rid="bib25" ref-type="bibr">25</xref>].</p><statement content-type="remark" id="rem-st23"><label>Remark 3.</label><p>With reference to Fig.&#x000a0;<xref rid="fig1" ref-type="fig">1</xref>, the left-hand side in 2 is finite when the 2 ECCs agree from some filtration value onward. This is exactly what happens, for example, when considering curves obtained from full complexes (i.e., filtered complexes having a single simplex as a last element of a filtration): at some value, all possible faces will have entered the filtration, and so the Euler characteristic will stabilize at 1. If this does not happen, the difference between the 2 ECCs will be unbounded. At the same time, it is straightforward to show that if 2 filtered complexes have different Euler characteristics at +&#x0221e;, their homologies will have a different number of essential classes. This translates to a different number of points at infinity in the persistence diagrams, whose Wasserstein distance would then be unbounded. In this case, the above result will trivially be +&#x0221e; &#x02264; +&#x0221e;.</p></statement></sec><sec id="sec3-2"><title>Euler characteristic profiles</title><p>We can immediately extend the notion of <italic toggle="yes">L</italic><sub>1</sub> distances between ECCs to work in the general case of <italic toggle="yes">n-</italic>dimensional ECPs.</p><statement content-type="definition" id="def-st24"><label>Definition 19.</label><p>Let <italic toggle="yes">K</italic><sub>1</sub>, <italic toggle="yes">K</italic><sub>2</sub> be 2 multifiltered cell complexes. The <italic toggle="yes">L</italic><sub>1</sub> distance between the corresponding <italic toggle="yes">n-</italic>dimensional Euler characteristic profiles is
<disp-formula><tex-math id="TM0055" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
||ECP(K_1, v) - ECP(K_2, v)||_1 = \int _{\mathbb {R}^n} |ECP(K_1,v) - ECP(K_2,v)| dv \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><p>It is natural to ask whether the stability result in <xref rid="update1698038310001" ref-type="disp-formula">2</xref> can be naturally extended to the multiparameter case. In the existing literature, Chen et&#x000a0;al. [<xref rid="bib19" ref-type="bibr">19</xref>] proposed the following weak <italic toggle="yes">L</italic><sub>1</sub>-metric in the case of bifiltered complexes (see Definition 3.2 in [<xref rid="bib19" ref-type="bibr">19</xref>]). Let us remind the proposed construction; consider 2 cell complexes <italic toggle="yes">K</italic><sub>1</sub> and <italic toggle="yes">K</italic><sub>2</sub> with a bifiltration function <inline-formula><tex-math id="TM0056" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$F : K_{1,2} \rightarrow \mathbb {R}^2$\end{document}</tex-math></inline-formula>. Let us denote with <italic toggle="yes">f</italic> and <italic toggle="yes">g</italic> the 2 real valued functions in the bifiltrations such that <italic toggle="yes">F</italic>(&#x003c3;) = ((<italic toggle="yes">f</italic>(&#x003c3;), <italic toggle="yes">g</italic>(&#x003c3;))) for every cell &#x003c3;. Moreover, let us index the threshold values of <italic toggle="yes">F</italic> as <inline-formula><tex-math id="TM0057" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$I = \lbrace (a_i, b_j) \, | \, 1 \le i \le m , 1 \le j \le n\rbrace$\end{document}</tex-math></inline-formula>. The idea behind the Chen et&#x000a0;al. [<xref rid="bib19" ref-type="bibr">19</xref>] construction is to fix 1 of the 2 filtrations at a specific value and consider the distances between the single-parameter persistence diagrams induced by the other filtration function. By considering the set of threshold values <italic toggle="yes">I</italic> as a matrix with <italic toggle="yes">i</italic> rows and <italic toggle="yes">j</italic> columns, they define the <italic toggle="yes">i</italic>th <italic toggle="yes">column distance</italic> for the <italic toggle="yes">k-</italic>dimensional PDs [Persistence Diagram (s)] as <inline-formula><tex-math id="TM0058" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$D^{i*}_k(K_1, K_2) = W_1 (D^g_k(K_1^{i*}), D^g_k(K_2^{i*}))$\end{document}</tex-math></inline-formula>. Similarly, the <italic toggle="yes">j</italic><sup><italic toggle="yes">th</italic></sup><italic toggle="yes">row distance</italic> is <inline-formula><tex-math id="TM0059" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$D^{*j}_k(K_1, K_2) = W_1 (D^f_k(K_1^{*j}), D^f_k(K_2^{*j}))$\end{document}</tex-math></inline-formula>.</p><statement content-type="definition" id="def-st25"><label>Definition 20 (Definition 3.2 in [19]).</label><p>The weak <italic toggle="yes">L</italic><sub>1</sub> metric between <italic toggle="yes">K</italic><sub>1</sub> and <italic toggle="yes">K</italic><sub>2</sub> is
<disp-formula><tex-math id="TM0060" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
D(K_1, K_2) = \max \left \{\sum _{k=0}^M \sum _{i=1}^m D^{i*}_k (K_1, K_2), \: \sum _{k=0}^M \sum _{j=1}^n D^{*j}_k (K_1, K_2) \right \}.
\end{eqnarray*}\end{document}</tex-math></disp-formula></p></statement><p>Being able to recover the single-parameter case, they prove the following stability result.</p><statement content-type="proposition" id="pro-st26"><label>Proposition 3 (Theorem 3.1 in [19]).</label><p>Let <italic toggle="yes">K</italic><sub>1</sub>, <italic toggle="yes">K</italic><sub>2</sub> be 2 bifiltered cell complexes. The distance between the corresponding Euler characteristic surfaces is bounded by the weak <italic toggle="yes">L</italic><sub>1</sub> metric metric between <italic toggle="yes">K</italic><sub>1</sub> and <italic toggle="yes">K</italic><sub>2</sub>,
<disp-formula><tex-math id="TM0061" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
||ECP(K_1, v) - ECP(K_2, v)||_1 \le c \cdot D(K_1, K_2) \: ,
\end{eqnarray*}\end{document}</tex-math></disp-formula>for some <italic toggle="yes">c</italic> &#x0003e; 0.</p></statement><p>This construction appears to be the natural generalization to multifiltration case of the stability result in <xref rid="update1698038310001" ref-type="disp-formula">2</xref>. However, there are some fundamental problems that undermine the usefulness of such a weak <italic toggle="yes">L</italic><sub>1</sub> metric.</p><statement content-type="remark" id="rem-st27"><label>Remark 4.</label><p>In our opinion, the sums over rows or columns in <xref rid="def-st25" ref-type="statement">20</xref> should be replaced with integrals over the filtration ranges. As already discussed in Remark&#x000a0;<xref rid="rem-st17" ref-type="statement">2</xref>, this would allow for more flexibility when dealing with filtration thresholds whose spacing is not constant.</p></statement><statement content-type="remark" id="rem-st28"><label>Remark 5.</label><p>Proposition&#x000a0;<xref rid="pro-st26" ref-type="statement">3</xref> will evaluate to a trivial &#x0221e; &#x02264; &#x0221e; in most cases, even the simplest one. Consider, for example, the situation depicted in Fig.&#x000a0;<xref rid="fig5" ref-type="fig">5</xref> of the ECP of a bifiltered complex <italic toggle="yes">K</italic><sub>1</sub> made by just one 0-dimensional cell that appears at filtration value (<italic toggle="yes">g</italic><sub>1</sub>, <italic toggle="yes">g</italic><sub>2</sub>). The ECP will then be 1 in the cone <inline-formula><tex-math id="TM0062" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\lbrace (x,y) \in \mathbb {R}^2 : x \ge g_1 , \, y \ge g_2 \rbrace$\end{document}</tex-math></inline-formula> and 0 otherwise. We can obtain a different complex <italic toggle="yes">K</italic><sub>2</sub> by perturbing the first filtration value by an &#x003f5; amount (<italic toggle="yes">g</italic><sub>1</sub> + &#x003f5;, <italic toggle="yes">g</italic><sub>2</sub>). The difference between the 2 ECPs will then be unbounded. At the same time, also the weak <italic toggle="yes">L</italic><sub>1</sub> distance between <italic toggle="yes">K</italic><sub>1</sub> and <italic toggle="yes">K</italic><sub>2</sub> will be unbounded because in the interval [<italic toggle="yes">g</italic><sub>1</sub>, <italic toggle="yes">g</italic><sub>1</sub> + &#x003f5;) &#x000d7; [<italic toggle="yes">g</italic><sub>2</sub>, +&#x0221e;], the 2 complexes have a different number of essential classes and so the <italic toggle="yes">W</italic><sub>1</sub> distance between the corresponding PDs will be infinite.</p></statement><fig position="float" id="fig5"><label>Figure 5:</label><caption><p>Minimal counterexample for the instability of ECP. Consider a cell complex made by only 1 vertex whose +1 contribution appears at some point <inline-formula><tex-math id="TM0063" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$g=(g_1, g_2) \in \mathbb {R}^2$\end{document}</tex-math></inline-formula> and move it to <italic toggle="yes">g</italic>&#x02032; = (<italic toggle="yes">g</italic><sub>1</sub> + &#x003f5;, <italic toggle="yes">g</italic><sub>2</sub>). Their difference, the region shaded in red, is unbounded.</p></caption><graphic xlink:href="giad094fig5" position="float"/></fig><p>Because of the discussed issues, the stability result in [<xref rid="bib19" ref-type="bibr">19</xref>], while being formally correct, does not cover a lot of practically relevant cases.</p><p>However, in most applications, we can <italic toggle="yes">truncate</italic> the ECP by limiting its filtration domain to the interval [0, <italic toggle="yes">f</italic><sub>&#x0221e;</sub>] in every filtration dimension, where <italic toggle="yes">f</italic><sub>&#x0221e;</sub> is a finite value. Note that this value at infinity should not be the same as the maximum filtration value of the complex&#x02019;s cells, but it should be strictly larger than the maximum filtration value. For example, in the case of images whose pixels have integer filtration values in the [0, 255] range (see section 14 "RGB images"&#x000a0;), we could choose <italic toggle="yes">f</italic><sub>&#x0221e;</sub> = 256 as a truncation value. By doing so, the distance between every pair of ECP will be finite, but it will of course depend on the truncation value. Using truncation, we can state the following result.</p><statement content-type="proposition" id="pro-st29"><label>Proposition 4.</label><p>Let <italic toggle="yes">K</italic> be a finite cell complex with an <italic toggle="yes">n</italic>-dimensional multifiltration <inline-formula><tex-math id="TM0064" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$F: K \rightarrow \mathbb {R}^n$\end{document}</tex-math></inline-formula>. We define <italic toggle="yes">K</italic><sup>&#x003f5;</sup> as the complex obtained by perturbing the filtration values of each cell in <italic toggle="yes">K</italic> by at most &#x003f5; in <italic toggle="yes">l</italic><sup>&#x0221e;</sup> norm. Let us assume, for simplicity, that we truncate the domain of every filtration function to the same interval [0, <italic toggle="yes">f</italic><sub>&#x0221e;</sub>]. We then have the following bound :
<disp-formula><tex-math id="TM0065" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
||ECP(K, v) - ECP(K^\epsilon , v)||_1 \le |K| \cdot d \cdot \epsilon ^{n-1} \cdot f_{\infty } \quad ,
\end{eqnarray*}\end{document}</tex-math></disp-formula>where |<italic toggle="yes">K</italic>| is the number of cells in the complex and <italic toggle="yes">n</italic> is the number of filtration parameters.</p></statement><statement content-type="proof"><label>Proof.</label><p>Let us consider a single-cell &#x003c3; &#x02208; <italic toggle="yes">K</italic> with filtration value <italic toggle="yes">g</italic> = (<italic toggle="yes">g</italic><sub>1</sub>, &#x022c5;&#x022c5;&#x022c5;, <italic toggle="yes">g</italic><sub><italic toggle="yes">d</italic></sub>). Its contribution to the ECP will be ( &#x02212; 1)<sup><italic toggle="yes">dim</italic>(&#x003c3;)</sup> in the cone above <italic toggle="yes">g</italic> (i.e., for all points <inline-formula><tex-math id="TM0066" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$x \in \mathbb {R}^d$\end{document}</tex-math></inline-formula> such that <italic toggle="yes">g</italic> &#x02264; <italic toggle="yes">x</italic> coordinate-wise). Let &#x003c3;&#x02032; be the corresponding cell in <italic toggle="yes">K</italic><sup>&#x003f5;</sup> whose filtration values have been maximally perturbed to <italic toggle="yes">g</italic>&#x02032; = (<italic toggle="yes">g</italic><sub>1</sub> + &#x003f5;, &#x022c5;&#x022c5;&#x022c5;, <italic toggle="yes">g</italic><sub><italic toggle="yes">d</italic></sub> + &#x003f5;). The volume of the region, which is in the cone of <italic toggle="yes">g</italic> but not on the cone of <italic toggle="yes">g</italic>&#x02032;, can be bounded by a sum of <italic toggle="yes">n n</italic>-dimensional cuboids of base &#x003f5;<sup><italic toggle="yes">n</italic> &#x02212; 1</sup> and height <italic toggle="yes">f</italic><sub>&#x0221e;</sub>, each of them corresponding to a shift of &#x003f5; in the direction of one axis, <italic toggle="yes">V</italic><sub>&#x003c3;</sub> &#x02264; <italic toggle="yes">d</italic> &#x000b7; &#x003f5;<sup><italic toggle="yes">n</italic> &#x02212; 1</sup> &#x000b7; <italic toggle="yes">f</italic><sub>&#x0221e;</sub>, where the inequality is due to the fact that cuboids can have a nonempty intersection. One of such cuboids is shaded in red in Fig.&#x000a0;<xref rid="fig5" ref-type="fig">5</xref>. Multiplying by the total number of cells gives us the bound.</p></statement></sec></sec><sec id="sec4"><title>Algorithms</title><p>Recall that the Euler characteristic of a cell complex is the alternating sum of the number of its cells in each dimension. The contribution of each cell will thus be plus or minus 1 depending on the dimension of the cell. Moreover, this contribution will appear at the cell&#x02019;s filtration level. Therefore, if we are able to obtain a list of all cells with their filtration values, we can compute the Euler characteristic at each filtration level. This is the main idea behind the following algorithms, which will always return what we will denote as <sc>list_of_contributions</sc>, a list of pairs (<italic toggle="yes">f</italic>(&#x003c3;), ( &#x02212; 1)<sup><italic toggle="yes">dim</italic>(&#x003c3;)</sup>) that stores each cell&#x02019;s contribution to the EC (Euler Characteristic) at the cell filtration level. Once these pairs have been sorted in ascending order with respect to the filtration, the Euler characteristic curve can be reconstructed by progressively summing up the contributions of following elements in the list.</p><statement content-type="remark" id="rem-st30"><label>Remark 6.</label><p>Roune and de Cabez&#x000f3;n [<xref rid="bib26" ref-type="bibr">26</xref>] proved that computing the Euler characteristic of a simplicial complex given by its vertices and facets is #-P-complete. Even if their result does not mention filtered complexes, it follows from it that the problem of computing the ECC is at least P-complete. Otherwise, by contradiction, we could construct an arbitrary filtration of the considered complex and look at the end value of the curve to obtain the Euler characteristic of the complex in polynomial time.</p></statement><sec id="sec4-1"><title>Vietoris&#x02013;Rips complexes</title><p>In this section,&#x000a0;we will present a distributed algorithm to compute the Euler characteristic curve of a Vietoris&#x02013;Rips simplicial complex obtained from a collection of points in <inline-formula><tex-math id="TM0067" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathbb {R}^n$\end{document}</tex-math></inline-formula>.</p><statement content-type="definition" id="def-st31"><label>Definition 21.</label><p>Let <italic toggle="yes">X</italic> be a finite collection of points in <inline-formula><tex-math id="TM0068" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathbb {R}^n$\end{document}</tex-math></inline-formula>, also denoted as a pointcloud. Given a parameter &#x003f5; &#x02264; 0, the <italic toggle="yes">Vietoris&#x02013;Rips complex</italic> constructed from <italic toggle="yes">X</italic> is the collection of all subsets of the diameter at most 2&#x003f5;, where the diameter is the greatest distance between any pair of vertices
<disp-formula><tex-math id="TM0069" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\text{V-R}(X, \epsilon ) = \lbrace \sigma \subseteq X \mid diam(\sigma ) \le 2\epsilon \rbrace \quad .
\end{eqnarray*}\end{document}</tex-math></disp-formula></p><p>The filtration of each simplex is given by its diameter.</p></statement><p>The Vietoris&#x02013;Rips complex is a <italic toggle="yes">flag complex</italic>; this means that a subset <italic toggle="yes">S</italic> of vertices is in the complex if every pair of vertices in <italic toggle="yes">S</italic> is in the complex. This is analogous to saying that the Vietoris&#x02013;Rips complex is completely determined by its 1-skeleton graph as there is a 1-to-1 correspondence between simplices in the complex and cliques in its 1-skeleton graph.</p><p>Therefore, it is straightforward to see that listing all the simplices in a Vietoris&#x02013;Rips complex is equivalent to performing a cliques count of its 1-skeleton graph [<xref rid="bib27" ref-type="bibr">27</xref>]. In order to compute the contributions to the ECC, we need to find an efficient and distributed way to list all cells in the simplex (i.e., all cliques in the 1-skeleton graph) and their filtration values (i.e., the length of the longest edge in each clique); this can be achieved in the following way. Given an ordered list of points <italic toggle="yes">X</italic> = {<italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub>: <italic toggle="yes">i</italic> &#x02208; [1, <italic toggle="yes">n</italic>]} (the points can be ordered in an arbitrary way) and a maximum distance &#x003f5;, for each point <italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub>, we build its local graph <italic toggle="yes">G</italic><sub><italic toggle="yes">i</italic></sub> of <italic toggle="yes">subsequent neighbors</italic>&#x02014;namely, all points <italic toggle="yes">x</italic><sub><italic toggle="yes">j</italic></sub> &#x02208; <italic toggle="yes">B</italic>(<italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub>, &#x003f5;)&#x02229;<italic toggle="yes">X</italic> with <italic toggle="yes">j</italic> &#x0003e; <italic toggle="yes">i</italic>. For each <italic toggle="yes">G</italic><sub><italic toggle="yes">i</italic></sub>, we list all of its cliques that contain <italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub>. They will correspond to simplices with <italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub> being the smallest vertex in the chosen ordering of points. This way, each simplex &#x003c3; in the V-R complex will be generated exactly once, when considering the local graph of its lowest vertex in the considered ordering.</p><p>Algorithm <xref rid="alg1" ref-type="table">1</xref>, which uses this idea, describes a way to list all the simplices of increasing dimension. At each iteration, we obtain a list of <italic toggle="yes">d</italic>-dimensional simplices (given as collections of vertices) and, for each of them, a list of common subsequent neighbors of its vertices. We can then extend each simplex to a (<italic toggle="yes">d</italic> + 1)&#x02013;dimensional one by adding 1 common neighbor to the collections of vertices. When doing so, we need to update the simplex&#x02019;s filtration value if one of the newly added edges is longer than the current filtration. Moreover, we need to update the list of common subsequent neighbors by intersecting it with the subsequent neighbors of the newly added vertex. Once we have obtained all possible (<italic toggle="yes">d</italic> + 1)&#x02013;simplices, we carry out this extension procedure 1 dimension higher. All of these operations are performed at the local graph of each vertex. The procedure ends when no simplex can be extended (i.e., when all maximal simplices have been listed). This construction might be understood as a breadth-first traversal of the simplex tree [<xref rid="bib27" ref-type="bibr">27</xref>].</p><table-wrap position="float" id="alg1"><label>Algorithm 1:</label><caption><p>COMPUTE LOCAL CONTRIBUTIONS V-R</p></caption><table frame="hsides" rules="groups"><tbody><tr><td rowspan="1" colspan="1">
<inline-graphic xlink:href="giad094alg1.jpg"/>
</td></tr></tbody></table></table-wrap><p>The main advantages of the proposed algorithm are 2: it does not require to construct the whole complex, leading to a significant decrease in memory utilization, and it considers each point separately, allowing the computations to be carried out independently.</p><p>The inputs of our algorithm are <italic toggle="yes">X</italic>, a ordered list of points in <inline-formula><tex-math id="TM0070" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathbb {R}^n$\end{document}</tex-math></inline-formula> and a maximum filtration value &#x003f5;. The output is <sc>list_of_contributions</sc>, an ordered list of pairs. For each simplex &#x003c3;, we store its contribution as a tuple (<italic toggle="yes">f</italic>(&#x003c3;), ( &#x02212; 1)<sup><italic toggle="yes">dim</italic>(&#x003c3;)</sup>). The output list will sorted according to the filtration values.</p><p>Note that the Algorithm <xref rid="alg1" ref-type="table">1</xref> is correct. First, every simplex in the Vietoris&#x02013;Rips complex will be generated. It will happen when its smallest vertex in the considered order will be considered in the <italic toggle="yes">for</italic> loop. Second, each simplex will be generated only once in the <italic toggle="yes">INCREASE_DIMENSION</italic> procedure (Algorithm <xref rid="alg2" ref-type="table">2</xref>). A simplex &#x003c3; = [<italic toggle="yes">v</italic><sub>0</sub>, &#x02026;, <italic toggle="yes">n</italic><sub><italic toggle="yes">n</italic> &#x02212; 1</sub>, <italic toggle="yes">v</italic><sub><italic toggle="yes">n</italic></sub>], where <italic toggle="yes">v</italic><sub>0</sub> &#x0003c; &#x02026; &#x0003c; <italic toggle="yes">n</italic><sub><italic toggle="yes">n</italic> &#x02212; 1</sub> &#x0003c; <italic toggle="yes">v</italic><sub><italic toggle="yes">n</italic></sub>, will be generated from a simplex [<italic toggle="yes">v</italic><sub>0</sub>, &#x02026;, <italic toggle="yes">n</italic><sub><italic toggle="yes">n</italic> &#x02212; 1</sub>] by adding <italic toggle="yes">v</italic><sub><italic toggle="yes">n</italic></sub> as a common neighbor of its vertices.</p><table-wrap position="float" id="alg2"><label>Algorithm 2:</label><caption><p>INCREASE_DIMENSION</p></caption><table frame="hsides" rules="groups"><tbody><tr><td rowspan="1" colspan="1">
<inline-graphic xlink:href="giad094alg2.jpg"/>
</td></tr></tbody></table></table-wrap></sec><sec id="sec4-2"><title>Time performance</title><p>The worst-case scenario occurs when the the 1-skeleton graph is fully connected. Assuming the pointcloud consists of <italic toggle="yes">n</italic> points, the resulting V-R complex will contain 2<sup><italic toggle="yes">n</italic></sup> &#x02212; 1 simplices. In this case, the time complexity of Algorithm <xref rid="alg1" ref-type="table">1</xref> is <inline-formula><tex-math id="TM0073" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathcal {O}(2^{n - 1} n)$\end{document}</tex-math></inline-formula>. More details are provided in Appendix&#x000a0;A.</p></sec><sec id="sec4-3"><title>Memory performance</title><p>Assuming the worst-case scenario, the size of the output list of contributions is <italic toggle="yes">O</italic>(<italic toggle="yes">n</italic><sup>2</sup>) while the maximal memory required at 1 intermediate step is <inline-formula><tex-math id="TM0074" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$O(2^n / \sqrt{n})$\end{document}</tex-math></inline-formula>. More details are provided in Appendix&#x000a0;A.</p></sec><sec id="sec4-4"><title>Choice of the vertex ordering</title><p>Note that the total running time of the fully parallelized Algorithm <xref rid="alg1" ref-type="table">1</xref> can be dominated by few vertices whose simplex tree is considerably larger than the others. This explains the plateau in Fig.&#x000a0;<xref rid="fig6" ref-type="fig">6</xref>. This effect can be mitigated by choosing a different ordering of the vertices. One efficient choice is to order the vertices by increasing number of &#x003f5;-neighbors. Since the local graph for each vertex is constructed by considering only its subsequent neighbors, this ordering will produce more evenly sized simplex trees. A simple example is shown in Fig.&#x000a0;<xref rid="fig7" ref-type="fig">7</xref>, while the effect of this reshuffling on a larger dataset is shown in Fig.&#x000a0;<xref rid="fig8" ref-type="fig">8</xref>.</p><fig position="float" id="fig6"><label>Figure 6:</label><caption><p>Average runtime over 10 runs of Algorithm <xref rid="alg1" ref-type="table">1</xref> as a function of the number of cores used. Contributions computed for the V-R complex obtained from 10,000 points sampled from the unit 4-sphere up to a maximum radius of 0.4. Experiment run on a AMD Ryzen Threadripper PRO 5955WX CPUu. Error bars are scaled up by a factor of 20 for visibility.</p></caption><graphic xlink:href="giad094fig6" position="float"/></fig><fig position="float" id="fig7"><label>Figure 7:</label><caption><p>Different ordering of the vertices can produce different simplex trees. In the first row, vertices are ordered by decreasing number of neighbors and in the second row by increasing number. The second choice produces more evenly sized trees.</p></caption><graphic xlink:href="giad094fig7" position="float"/></fig><fig position="float" id="fig8"><label>Figure 8:</label><caption><p>Effect of different orderings of vertices for the example in Fig.&#x000a0;<xref rid="fig6" ref-type="fig">6</xref>. Selecting the ascending order allows achieving a more even distribution in the number of simplices in each tree (A), thus reducing the number of very large trees that dominate the running time (B).</p></caption><graphic xlink:href="giad094fig8" position="float"/></fig></sec><sec id="sec4-5"><title>Cubical complexes</title><p>Cubical complexes are the most used combinatorial structure to represent digital grayscale images and extract topological information from them. There are 2 ways to construct a cubical complex from an image, the V-construction and the T-construction. The former identifies pixels&#x02014;also know as voxels, in case of images of arbitrary dimension&#x02014;with the vertices (the 0-dimensional cells) of the cubical complex. Voxels&#x02019; values are used to define the filtration on the vertices and the filtration of each other elementary cube is the maximal value of its vertices. The T-construction can be seen as the dual procedure, voxels&#x02019; values are assigned to the top-dimensional cubes, and the filtration values are propagated to lower-dimensional cells by taking the minimum over the cofaces. The relation between these 2 constructions is explored in a recent work by Bleile et&#x000a0;al. [<xref rid="bib28" ref-type="bibr">28</xref>]. In this article, we chose the T-construction, although the presented techniques translate easily to the V-construction.</p><p>Similar to the V-R case, we are interested, given a grayscale <italic toggle="yes">n</italic>-dimensional image, in obtaining a list of contributions to the Euler characteristic of its corresponding cubical complex. As before, we then need to iterate over all cells &#x003c3; in the complex and store each contribution as a tuple (<italic toggle="yes">f</italic>(&#x003c3;), ( &#x02212; 1)<sup><italic toggle="yes">dim</italic>(&#x003c3;)</sup>). This can be achieved in a streaming fashion by loading into memory a 2-voxel-high slice of the image, iterating through the cells in the bottom row computing their contributions, and then moving the sliding window up by 1 voxel. To make sure we consider each cell&#x02019;s contribution exactly once, at each iteration, we consider 1 voxel and compute the contributions to the Euler characteristic of the cells in its <italic toggle="yes">upper closure</italic>. Assuming that we can identify each top-dimensional cell <italic toggle="yes">c</italic><sub><italic toggle="yes">i</italic></sub> with the indices (<italic toggle="yes">x</italic><sub>1</sub>, &#x022c5;&#x022c5;&#x022c5;, <italic toggle="yes">x</italic><sub><italic toggle="yes">n</italic></sub>) of the corresponding voxel in the input <italic toggle="yes">n</italic>-dimensional image, we define the upper closure of <italic toggle="yes">c</italic><sub><italic toggle="yes">i</italic></sub> as the set containing <italic toggle="yes">c</italic><sub><italic toggle="yes">i</italic></sub> and all its faces that are shared with other top-dimensional cells <italic toggle="yes">c</italic><sub><italic toggle="yes">j</italic></sub> whose indices are <italic toggle="yes">y</italic><sub><italic toggle="yes">i</italic></sub> = <italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub> or <italic toggle="yes">y</italic><sub><italic toggle="yes">i</italic></sub> = <italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub> + 1 for all <italic toggle="yes">i</italic>. An example of this procedure can be found in Fig.&#x000a0;<xref rid="fig9" ref-type="fig">9</xref>.</p><fig position="float" id="fig9"><label>Figure 9:</label><caption><p>A slice of a cubical complex obtained from a 2-dimensional image. The image&#x02019;s pixels are associated to the top-dimensional cells, depicted in yellow. Algorithm <xref rid="alg3" ref-type="table">3</xref> takes as input a 2-voxel tick slice of the image and iterates through the voxels in the bottom row. At each iteration, a voxel is selected and the contributions of the cells in its upper closure are computed. In this example, the voxel at coordinates (1, 1) is selected, and the considered contributions are depicted in red: the one coming from the corresponding 2-cell, the two from the 1-cell shared with (2,1) and (1,2), and the contribution from the 0-cell shared with (2,1), (1,2), and (2,2).</p></caption><graphic xlink:href="giad094fig9" position="float"/></fig><p>As already mentioned, a similar streaming algorithm to compute the ECC of grayscale images has been presented by Heiss and Wagner [<xref rid="bib15" ref-type="bibr">15</xref>]. They also provide a fast open-source C++ implementation. Recently, Wang et al. [<xref rid="bib16" ref-type="bibr">16</xref>] provided a GPU implementation of the same algorithm. However, there is a significant difference between their approach and the one we describe in Algorithm <xref rid="alg3" ref-type="table">3</xref>: they keep track of the faces introduced by each voxel by looking at the gray values of the voxel&#x02019;s 3<sup><italic toggle="yes">d</italic></sup> &#x02212; 1 neighbor and store the <italic toggle="yes">cumulative</italic> change in the EC at the voxel&#x02019;s filtration value. This requires sorting the voxel&#x02019;s value from the lowest to highest. While such a sorting can be done for 1-value filtrations, it cannot be performed for multifiltrations, as no good ordering exists in the general case. There are some small differences in the implementation too: CHUNKYEuler only works with integer filtration values and only accepts &#x0201c;raw&#x0201d; binary files as input. Our implementation, while being not as fast as CHUNKYEuler, offers the user more flexibility in the input and choice of filtration (or multifiltration) values.</p><table-wrap position="float" id="alg3"><label>Algorithm 3:</label><caption><p>COMPUTE LOCAL CONTRIBUTIONS CUBICAL</p></caption><table frame="hsides" rules="groups"><tbody><tr><td rowspan="1" colspan="1">
<inline-graphic xlink:href="giad094alg3.jpg"/>
</td></tr></tbody></table></table-wrap></sec><sec id="sec4-6"><title>Time and memory complexity</title><p>Considering a <italic toggle="yes">d</italic>-dimensional image with <italic toggle="yes">n</italic> voxels as input, the resulting cubical complex will have 3<sup><italic toggle="yes">d</italic></sup><italic toggle="yes">n</italic> cells. The running time of Algorithm <xref rid="alg3" ref-type="table">3</xref> is then linear in the number of cells in the complex with a multiplicative constant, which is exponential in the dimension. This is not a problem in practice as images with dimension larger than 3 are not common in applications. The memory requirement is just the space needed to store a 2-row slice of the input image, and the memory overhead for computing the local contributions for each voxel is negligible.</p></sec><sec id="sec4-7"><title>From Euler characteristic curves to profiles</title><p>Both Algorithm <xref rid="alg1" ref-type="table">1</xref> and Algorithm <xref rid="alg3" ref-type="table">3</xref> can be immediately extended to compute the Euler characteristic profile of multifiltered Vietoris&#x02013;Rips or cubical complexes. In the Vietoris&#x02013;Rips case, we require that all filtration functions should be defined on the vertices or the edges and then be extended to higher-dimensional simplices by some user-defined rule. This is to enssure that the resulting multifiltered V-R complex is still a flag complex. In the case of cubical complexes, we assume that the input images contain a <italic toggle="yes">n</italic>-tuple of numbers in each voxel&#x02014;RGB images are a typical <italic toggle="yes">n</italic> = 3 example&#x02014;and values are propagated to lower-dimensional cells by some user-defined rules. In both cases, the output of both algorithms will be a list of (<italic toggle="yes">n</italic> + 1)&#x02212;tuples (<italic toggle="yes">f</italic><sub>1</sub>(&#x003c3;), &#x022c5;&#x022c5;&#x022c5;, <italic toggle="yes">f</italic><sub><italic toggle="yes">n</italic></sub>(&#x003c3;), ( &#x02212; 1)<sup><italic toggle="yes">dim</italic>(&#x003c3;)</sup>) that stores the list of contributions to the ECP at different points <inline-formula><tex-math id="TM0076" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$f(\sigma ) \in \mathbb {R}^n$\end{document}</tex-math></inline-formula>.</p><statement content-type="remark" id="rem-st32"><label>Remark 7.</label><p>In above, the simplest case of so-called 1-critical multifiltration is discussed. In this case, each cell &#x003c3; appears in a unique value of the multifiltration. In a general case, a cell &#x003c3; may appear in multiple noncomparable values <italic toggle="yes">p</italic><sub>1</sub>, &#x02026;, <italic toggle="yes">p</italic><sub><italic toggle="yes">k</italic></sub> of multifiltration. A simple generalization described below allows to adopt this presented algorithm to the general case; let us assume that each <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> is <italic toggle="yes">n</italic>-dimensional tuple, <inline-formula><tex-math id="TM0077" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$p_i = (p_i^0,p_i^1,\ldots ,p_i^n)$\end{document}</tex-math></inline-formula>. We assume that <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> and <italic toggle="yes">p</italic><sub><italic toggle="yes">j</italic></sub> are not comparable provided <italic toggle="yes">i</italic> &#x02260; <italic toggle="yes">j</italic>. It means that there exist a pair of coordinates <italic toggle="yes">l</italic> &#x02260; <italic toggle="yes">m</italic> so that <inline-formula><tex-math id="TM0078" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$p_i^l \lt p_j^l$\end{document}</tex-math></inline-formula> and <inline-formula><tex-math id="TM0079" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$p_i^m \gt p_j^m$\end{document}</tex-math></inline-formula>. Then, the cell &#x003c3; contributes the value <inline-formula><tex-math id="TM0080" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(-1)^{\dim (\sigma )}$\end{document}</tex-math></inline-formula> for all the points <inline-formula><tex-math id="TM0081" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$x \in \mathbb {R}^n$\end{document}</tex-math></inline-formula> for which there exist <italic toggle="yes">i</italic> such that <italic toggle="yes">x</italic> &#x0003e; <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub>. Note that the regions consisting of points greater that <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> overlap for different <italic toggle="yes">i</italic> &#x02208; {1, &#x02026;, <italic toggle="yes">k</italic>}; hence, we need to avoid double and multiple counting of the contributions. Below we describe a procedure to achieve it and enforce the contribution of exactly <inline-formula><tex-math id="TM0082" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$(-1)^{\dim (\sigma )}$\end{document}</tex-math></inline-formula> for all <italic toggle="yes">x</italic> &#x0003e; <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> for arbitrary <italic toggle="yes">i</italic> &#x02208; {1, &#x02026;, <italic toggle="yes">k</italic>}. For that purpose, given <italic toggle="yes">i</italic> &#x02260; <italic toggle="yes">j</italic>, we define <inline-formula><tex-math id="TM0083" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$p_i \vee p_j = ( \max (p_i^1,p_j^1),\max (p_i^2,p_j^2),\ldots ,\max (p_i^n,p_j^n) )$\end{document}</tex-math></inline-formula>. Algorithm <xref rid="alg4" ref-type="table">4</xref> defines a set of points with appropriate contributions to enforce the required condition for all <italic toggle="yes">x</italic> &#x02265; <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> for all <italic toggle="yes">i</italic> &#x02208; {1, &#x02026;, <italic toggle="yes">k</italic>}.</p><p>It is straightforward to see that for any given cell &#x003c3;, its contributions to the ECP will change at most in <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub>&#x02228;<italic toggle="yes">p</italic><sub><italic toggle="yes">j</italic></sub> for <italic toggle="yes">i, j</italic> &#x02208; {1, &#x02026;, <italic toggle="yes">k</italic>}, where {<italic toggle="yes">p</italic><sub>1</sub>, &#x02026;, <italic toggle="yes">p</italic><sub><italic toggle="yes">k</italic></sub>} are incompatible points in which &#x003c3; appears in the multifiltration. Algorithm <xref rid="alg4" ref-type="table">4</xref> scans all those points and assigns the appropriate value (see lines 1 and 9) to contributions to the ECP. Note that all points <italic toggle="yes">p</italic><sub>1</sub>, &#x02026;, <italic toggle="yes">p</italic><sub><italic toggle="yes">k</italic></sub> have their contributions initially set in line 1. Consequently, the presented algorithm will terminate, as in each iteration, at least 1 <italic toggle="yes">p</italic> will be added to the <italic toggle="yes">Contribution</italic> list. In addition, it explicitly enforces the correct contribution of the cell &#x003c3; to all points <italic toggle="yes">x</italic> &#x02265; <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> for any <italic toggle="yes">i</italic> &#x02208; {1, &#x02026;, <italic toggle="yes">k</italic>}.</p></statement><table-wrap position="float" id="alg4"><label>Algorithm 4:</label><caption><p>CONTIBUTION OF &#x003c3; TO ECP</p></caption><table frame="hsides" rules="groups"><tbody><tr><td rowspan="1" colspan="1">
<inline-graphic xlink:href="giad094alg4.jpg"/>
</td></tr></tbody></table></table-wrap></sec></sec><sec id="sec5"><title>Data Structures for ECPs</title><p>All the algorithms we described in the previous section&#x000a0;output a list of contributions to the Euler characteristic profile. For an <italic toggle="yes">n</italic>-dimensional profile, each contribution in the list is a pair where the first entry is an <italic toggle="yes">n</italic>-tuple storing the coordinates in <inline-formula><tex-math id="TM0085" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathbb {R}^n$\end{document}</tex-math></inline-formula> at which the Euler characteristic varies by the integer values stored in the second item. When dealing with 1-dimensional ECCs, it makes sense to sort the contributions according to their filtration value, in order to perform faster operations on them.</p><sec id="sec5-1"><title>Retrieving the EC at some filtration values</title><p>Given an ECP as a list of contributions, the first basic operation is to retrieve the value of the Euler characteristic at an arbitrary filtration value <italic toggle="yes">f</italic><sub>*</sub>. It can be obtained by summing up all the contributions in the ECP that appear at filtration values less than or equal to <italic toggle="yes">f</italic><sub>*</sub>. For a <italic toggle="yes">d</italic>-dimensional ECP, this can be achieved in linear time with respect to the size of the contribution list. In the 1-dimensional case, we can take advantage of the total ordering on the list of contributions, since the filtration values <inline-formula><tex-math id="TM0086" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$f_i \in \mathbb {R}$\end{document}</tex-math></inline-formula>. By doing so we can build an auxiliary data structure storing the value of the Euler characteristic at each <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub>, the points in which the ECC is changing value. This can be done in <italic toggle="yes">O</italic>(<italic toggle="yes">n</italic>) time and space, where <italic toggle="yes">n</italic> is the length of the list of contributions. Given such a structure, computing the value of the ECC at a given filtration <italic toggle="yes">f</italic><sub>*</sub> boils down to the the search for the largest jump point <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub> &#x0003c; <italic toggle="yes">f</italic><sub>*</sub> and retrieving the value of the ECC therein. This can be achieved by interpolation search in <italic toggle="yes">O</italic>(<italic toggle="yes">log</italic>(<italic toggle="yes">log</italic>(<italic toggle="yes">n</italic>))) time.</p></sec><sec id="sec5-2"><title>Computing distances</title><sec id="sec5-2-1"><title>Distances between Euler characteristic curves</title><p>In the&#x000a0;Euler characteristic curves section, we introduced the notion of difference between 2 ECCs, expressed in terms of the <italic toggle="yes">L</italic><sub>1</sub> norm of the difference between the 2 curves. One should note that, in the case of finite Vietoris&#x02013;Rips or cubical complexes, such a difference is always finite (but not bounded) as all ECCs will eventually stabilize to 1 for a sufficiently large filtration value. When the construction of a Vietoris&#x02013;Rips complex is stopped at a certain diameter 2&#x003f5;, and the final complexes have more than 1 infinite homology, it make sense to restrict the integral used in distance computations to an interval [0, 2&#x003f5;] in order to make the distances between the ECCs finite.</p><p>Both Algorithms <xref rid="alg1" ref-type="table">1</xref> and <xref rid="alg3" ref-type="table">3</xref> return the computed ECC as a list of pairs (<italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub>, <italic toggle="yes">c</italic><sub><italic toggle="yes">i</italic></sub>) where <italic toggle="yes">c</italic><sub><italic toggle="yes">i</italic></sub> is an integer representing the change in the Euler characteristic at filtration <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub>. Such a list is sorted in increasing order with respect to the filtration values. Using such a data structure, the difference between 2 ECCs can be computed in linear time with the size of the lists. Given 2 list of contributions <italic toggle="yes">ECC</italic><sub>1</sub> and <italic toggle="yes">ECC</italic><sub>2</sub>, we can merge them in linear time, preserving the order. While merging, we flip the sign of all the contributions coming from <italic toggle="yes">ECC</italic><sub>2</sub>. Let us denote the obtained list with <italic toggle="yes">ECC</italic><sub>1&#x02212;2</sub>. Now the difference can be computed by iterating over the full list</p><disp-formula>
<tex-math id="TM0087" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
||ECC_1 - ECC_2||_1 = \sum _i (f_{i+1} - f_i) EC(f_i) \quad ,
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><p>where <inline-formula><tex-math id="TM0088" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$EC(f_i) = \sum _{j=0}^i c_j$\end{document}</tex-math></inline-formula> with respect to the ordering of <italic toggle="yes">ECC</italic><sub>1&#x02212;2</sub>.</p></sec><sec id="sec5-2-2"><title>Distances between Euler characteristic profiles</title><p>Unfortunately, the strategy proposed in the previous section&#x000a0;is difficult to generalize in the multifiltration setting as there is no natural way to sort the list of contributions. We present here a basic algorithm to compute the distances between 2 ECPs and leave the search for a potentially faster algorithm to future work.</p><p>Let <italic toggle="yes">ECP</italic><sub>1</sub> and <italic toggle="yes">ECP</italic><sub>2</sub> be 2 lists of contributions representing 2 <italic toggle="yes">n</italic>-dimensional profiles. We can merge them in linear time, as in the 1-dimensional case, flipping the sign of the contributions in the second list. Let <italic toggle="yes">N</italic> be the total number of contributions. With reference to Fig.&#x000a0;<xref rid="fig10" ref-type="fig">10</xref>, the coordinates of such contributions will create an <italic toggle="yes">n</italic>-dimensional irregular grid of size (<italic toggle="yes">N</italic> + 1). The value of the EC inside each cuboid will be equal to the EC at the cuboid&#x02019;s bottom left corner and can be computed in <italic toggle="yes">O</italic>(<italic toggle="yes">N</italic>). The <italic toggle="yes">L</italic><sub>1</sub> distance between the 2 ECPs can then be obtained by summing up the values of the EC in each cuboid weighted by the cuboid&#x02019;s volume. Given that the number of cuboids is (<italic toggle="yes">N</italic> + 1)<sup><italic toggle="yes">d</italic></sup>, this operation can be computed in <italic toggle="yes">O</italic>(<italic toggle="yes">N</italic><sup><italic toggle="yes">d</italic> + 1</sup>). Note that the ECPs need to be truncated in order to avoid cuboids with infinite volume.</p><fig position="float" id="fig10"><label>Figure 10:</label><caption><p>Example of a 2-dimensional ECP with 3 contributions. The green points indicate a +1 while the red point is a &#x02212;1. The plane can then be subdivided in a 4 &#x000d7; 4 irregular grid. The coloring of each block indicates the value of the EC in that region; white is 0, light gray is 1, and dark gray is 2.</p></caption><graphic xlink:href="giad094fig10" position="float"/></fig></sec></sec></sec><sec id="sec6"><title>Vectorization</title><p>Vectorizing the ECC/ECP is a critical step if we are interested in using these invariants in a machine learning framework.</p><sec id="sec6-1"><title>Curves</title><p>Assume we are given an ECC whose filtration values ranges from 0 to <italic toggle="yes">f</italic><sub><italic toggle="yes">max</italic></sub>. We can convert it to a vector by evenly sampling it <italic toggle="yes">N</italic> times between 0 and <italic toggle="yes">f</italic><sub><italic toggle="yes">max</italic></sub>. If we choose to include the endpoints, the resulting vector will be <italic toggle="yes">vec</italic>(<italic toggle="yes">ECC, N</italic>) = [<italic toggle="yes">EC</italic>(0), <italic toggle="yes">EC</italic>(&#x00394;), <italic toggle="yes">EC</italic>(2&#x00394;), &#x022c5;&#x022c5;&#x022c5;, <italic toggle="yes">EC</italic>((<italic toggle="yes">N</italic> &#x02212; 2)&#x00394;), <italic toggle="yes">EC</italic>(<italic toggle="yes">f</italic><sub><italic toggle="yes">max</italic></sub>)], where &#x00394; is the vectorization&#x02019;s resolution, which is defined as &#x00394; = <italic toggle="yes">f</italic><sub><italic toggle="yes">max</italic></sub>/(<italic toggle="yes">N</italic> &#x02212; 1).</p><p>The vectorized ECC can be obtained by such vector as the union of <italic toggle="yes">N</italic> &#x02212; 1 left-closed, right-open intervals of length &#x00394; that correspond to sampling the value of the EC at filtration value <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub> and extending it until <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic> + 1</sub>. It makes sense then to ask whether it is possible to bound the difference between an ECC and its vectorized representation. Fig.&#x000a0;<xref rid="fig11" ref-type="fig">11</xref> is an example of such difference when a curve is sampled in 5 points.</p><statement content-type="proposition" id="pro-st33"><label>Proposition 5.</label><p>Let <italic toggle="yes">K</italic> be a filtered cell complex whose filtration values ranges from 0 to <italic toggle="yes">f</italic><sub><italic toggle="yes">max</italic></sub>. The <italic toggle="yes">L</italic><sub>1</sub> norm between the Euler characteristic curve of <italic toggle="yes">K</italic> and its vectorized version at resolution &#x00394; is bounded by
<disp-formula id="equ3"><label>(3)</label><tex-math id="TM0089" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
|| ECC(K) - vec(ECC(K), N)||_1 \le \Delta ( |K|/2 + F )
\end{eqnarray*}\end{document}</tex-math></disp-formula>where |<italic toggle="yes">K</italic>| is the number of simplices in the complex and <inline-formula><tex-math id="TM0090" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$F = \sum _{i=0}^{n-2}|EC(i \Delta ) - EC((i+1)\Delta )|$\end{document}</tex-math></inline-formula> is the sum of the absolute value of the differences between consecutive values in the vectorized Euler characteristic <italic toggle="yes">vec</italic>(<italic toggle="yes">ECC</italic>(<italic toggle="yes">K</italic>), <italic toggle="yes">N</italic>).</p></statement><statement content-type="proof"><label>Proof.</label><p>We will prove the 2 terms in the bound separately as they come from 2 different types of errors.</p><p>Type I errors occur when the EC at 2 consecutive sampling points <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub> and <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic> + 1</sub> is different. The simplest case is depicted in Fig.&#x000a0;<xref rid="fig12" ref-type="fig">12</xref> A; the EC changes values in between the sampling interval. We can upper bound this error with the area of the rectangle having as base the vectorization&#x02019;s resolution &#x00394; = <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic> + 1</sub> &#x02212; <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub> and as height the difference between the EC at the 2 sampling points |<italic toggle="yes">EC</italic>(<italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub>) &#x02212; <italic toggle="yes">EC</italic>(<italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic> + 1</sub>). Note that this bound also holds in the more general case where the EC varies monotonically at multiple values inside the sampling interval. By summing up all the contributions, we obtain the value <inline-formula><tex-math id="TM0091" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\Delta \cdot F = \Delta \cdot \sum _{i=0}^{n-2}|EC(i \Delta ) - EC((i+1)\Delta )|$\end{document}</tex-math></inline-formula>.</p><p>Type II errors (see Fig.&#x000a0;<xref rid="fig12" ref-type="fig">12B</xref>) occur when the EC has the same value at consecutive filtration steps but varies in between. The maximum possible variation can be upper bounded by the area of the rectangle with &#x00394; as base and half the number of cells in the complex as height. Each cell contributes to the EC by &#x000b1;1, and the factor one-half is due to the constraint that the EC has the same value in <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic></sub> and <italic toggle="yes">f</italic><sub><italic toggle="yes">i</italic> + 1</sub>. This amounts to the values &#x00394; &#x000b7; |<italic toggle="yes">K</italic>|/2.</p><p>By summing up the 2 contributions, we obtain the bound in <xref rid="equ3" ref-type="disp-formula">3</xref>. Note that a generic situation can always be described as a combination of type I and type II errors.</p></statement><fig position="float" id="fig11"><label>Figure 11:</label><caption><p>An Euler characteristic curve (black) and its vectorized version (green) with resolution &#x00394;. In this case, the vectorized version is stored as a vector of length 5 (the green filled-in points) but can be reconverted to a step-size function.</p></caption><graphic xlink:href="giad094fig11" position="float"/></fig><p>We have shown a way to bound the distance between an ECC and its vectorized version. Another possible stability question is whether this vectorization preserves distances between ECCs. In other words, we are interested in knowing whether something can be said for ||<italic toggle="yes">vec</italic>(<italic toggle="yes">ECC</italic><sub>1</sub>, <italic toggle="yes">N</italic>) &#x02212; <italic toggle="yes">vec</italic>(<italic toggle="yes">ECC</italic><sub>2</sub>, <italic toggle="yes">N</italic>)|| given ||<italic toggle="yes">ECC</italic><sub>1</sub> &#x02212; <italic toggle="yes">ECC</italic><sub>2</sub>||. Unfortunately, it is possible to construct examples in which 2 curves can be made arbitrarily far apart, but they have the same vectorization or 2 curves can be made arbitrarily close but have drastically different vectorizations. Fig.&#x000a0;<xref rid="fig13" ref-type="fig">13</xref> shows 2 such examples. Moreover, in the existing literature, Johnson and Jung [<xref rid="bib29" ref-type="bibr">29</xref>] prove that the distance between 2 vectorized Betti curves cannot be bounded by the Wasserstein distance between the respective persistence diagrams. They propose a stable vectorization inspired by Gaussian smoothing techniques.</p><fig position="float" id="fig12"><label>Figure 12:</label><caption><p>The 2 possible source of errors during vectorization of an ECC.</p></caption><graphic xlink:href="giad094fig12" position="float"/></fig><fig position="float" id="fig13"><label>Figure 13:</label><caption><p>Two ECCs superimposed in the same plot. (A) The 2 curves can be made arbitrarily far apart in <italic toggle="yes">L</italic><sub>1</sub> but have the same vectorization. (B) The 2 curves can be made arbitrarily close but have drastically different vectorizations.</p></caption><graphic xlink:href="giad094fig13" position="float"/></fig></sec><sec id="sec6-2"><title>Profiles</title><p>An <italic toggle="yes">n</italic>-dimensional Euler characteristic profile whose filtration values ranges from 0 to <inline-formula><tex-math id="TM0092" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$f^i_{max}$\end{document}</tex-math></inline-formula> for <italic toggle="yes">i</italic> &#x02208; 1&#x022c5;&#x022c5;&#x022c5;<italic toggle="yes">n</italic> can be vectorized in a similar fashion by sampling it on a grid of size <italic toggle="yes">N</italic><sub>1</sub> &#x000d7; <italic toggle="yes">N</italic><sub>2</sub> &#x000d7; &#x022c5;&#x022c5;&#x022c5; &#x000d7; <italic toggle="yes">N</italic><sub><italic toggle="yes">n</italic></sub>. In general, the <italic toggle="yes">N</italic><sub><italic toggle="yes">i</italic></sub> can be different and thus lead to different resolutions &#x00394;<sub><italic toggle="yes">i</italic></sub> on the various filtration parameters. The output of this sampling procedure is an <italic toggle="yes">n</italic>-dimensional tensor <italic toggle="yes">vec</italic>(<italic toggle="yes">ECP, N</italic><sub><italic toggle="yes">i</italic></sub>) that can be eventually flattened to a 1-dimensional vector. Although this is an intuitive generalization of the 1-dimensional ECC case, the procedure has an increased computational cost due to the difficulties in sampling EC values from a profile, as already discussed in section 14 "Retrieving the EC at some filtration values"&#x000a0;. Moreover, the stability result in <xref rid="pro-st33" ref-type="statement">5</xref> cannot be generalized to the multiparameter setting. As depicted in Fig.&#x000a0;<xref rid="fig14" ref-type="fig">14</xref>, the grid vectorization could not detect the contributions coming from pairs of cells. In the multiparameter case, however, it is not possible to bound this contribution using only the vectorization resolutions &#x00394; as such a contribution can persist on subsequent grid elements up to infinity.</p><fig position="float" id="fig14"><label>Figure 14:</label><caption><p>A 2-dimensional analogue of a type II error of Fig.&#x000a0;<xref rid="fig12" ref-type="fig">12</xref>. The ECP is vectorized by sampling the EC values on the green grid. We can add pair of cells with contributions &#x000b1;1 inside the rectangle ABCD in such a way that the value of the EC on the vertices does not change. However, such contributions have a nonzero sum on an area that can be made arbitrarily large.</p></caption><graphic xlink:href="giad094fig14" position="float"/></fig></sec></sec><sec id="sec7"><title>Examples and Experiments</title><sec id="sec7-1"><title>RGB images</title><p>A toy experiment using 3-dimensional Euler characteristic profiles can be constructed using RGB images. In a RGB image, each pixel contains a tuple of 3 integers, each ranging from 0 to 255. They stand for the red, green, and blue color channel, and all colors in the visible spectrum can be represented by a 3-tuple. In particular, black is coded by (0,0,0) and white is (255, 255, 255).</p><p>In this example, we consider 2 different textures, stripes and checks; each of them can be red, green, or blue. We generate 10 samples of each combination of style and color by adding random Gaussian noise to each pixel. We then compute the 3-dimensional Euler characteristic profile of the cubical complex obtained from each image and compute the matrix of pairwise <italic toggle="yes">L</italic><sub>1</sub> distances between them. Such a matrix is show in Fig.&#x000a0;<xref rid="fig15" ref-type="fig">15</xref>. It confirms that distance between Euler characteristic profiles of different images increase following the intuitive sequence same style, same color &#x0003c; same style, different color &#x0003c; different style, same color &#x0003c; different style, different color.</p><fig position="float" id="fig15"><label>Figure 15:</label><caption><p>A 60 &#x000d7; 60 distance matrix between Euler characteristic profiles of different RGB images.</p></caption><graphic xlink:href="giad094fig15" position="float"/></fig><fig position="float" id="fig16"><label>Figure 16:</label><caption><p>(A) A raw RGB ROI. (B) Hematoxylin channel. (C) Eosin channel.</p></caption><graphic xlink:href="giad094fig16" position="float"/></fig><fig position="float" id="fig17"><label>Figure 17:</label><caption><p>(A) Hematoxylin ECC for the ROI in Fig.&#x000a0;<xref rid="fig16" ref-type="fig">16</xref>. (B) The eosin ECC. (C) The combined ECP.</p></caption><graphic xlink:href="giad094fig17" position="float"/></fig></sec><sec id="sec7-2"><title>Immune cell spatial patterns in tumors</title><p>Vipond et&#x000a0;al. [<xref rid="bib30" ref-type="bibr">30</xref>] applied multiparameter persistent homology (MPH) landscapes to study immune cell location in digital histology images from head and neck cancer. They extracted the locations of 3 immune cell types from histology slides, thus obtaining a list of pointclouds labeled CD8<sup>+</sup>, FoxP3<sup>+</sup>, or CD68. The goal is to correctly classify a pointcloud. All pointcloud data are available at [<xref rid="bib31" ref-type="bibr">31</xref>]. The authors created a bifiltered Vietoris&#x02013;Rips complex from each pointcloud, using radius and a codensity function defined over each vertex <italic toggle="yes">p</italic> as <inline-formula><tex-math id="TM0093" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\rho _{10}(p) = \frac{1}{10}\sum _{i=1}^{10} ||p - p_i||_2$\end{document}</tex-math></inline-formula>, where <italic toggle="yes">p</italic><sub><italic toggle="yes">i</italic></sub> is the <italic toggle="yes">i</italic>th nearest neighbor of <italic toggle="yes">p</italic>. They then computed MPH landscapes and used them as input for 1 of 3 classifiers: linear discriminant analysis (LDA), regularized linear discriminant analysis (rLDA), and regularized quadratic discriminant analysis (rQDA) [<xref rid="bib32" ref-type="bibr">32</xref>]. They made a randomized 80/20 training/test split and evaluated the classification accuracy of 3 classifiers on the test data for each pair of cell types and for the 3-class problem. The classification results are reported in the supplementary material of [<xref rid="bib30" ref-type="bibr">30</xref>].</p><p>We used the authors&#x02019; code to regenerate the same standard Vietoris&#x02013;Rips and bifiltered Vietoris&#x02013;Rips complexes from the provided pointclouds. We then computed ECC (radius only) and ECP (radius and codensity) for each complex and used them as input for the same LDA, rLDA, and rQDA classifiers using the same train&#x02013;test split procedure. The average accuracy for the various classification tasks is reported in Tables&#x000a0;<xref rid="tbl1" ref-type="table">1</xref>, <xref rid="tbl2" ref-type="table">2</xref>, and&#x000a0;<xref rid="tbl3" ref-type="table">3</xref>. Both ECC and ECP significantly outperform MPH landscapes while there is apparently no gain in moving from ECC to ECP. This can be an indication that the second dimension in the filtration (the codensity parameter) does not contain significant information.</p><table-wrap position="float" id="tbl1"><label>Table 1:</label><caption><p>Average classification accuracy for the LDA classifier using as input MLP (Multiparameter Persistence Landscape), ECC, or ECP. Data for each tumor are split into 80/20 train&#x02013;test splits and classification accuracy is reported as the mean over 100 repetitions of splitting, training, and testing.</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">CD68<sup>+</sup> vs. FoxP3<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. FoxP3<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. CD68<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. CD68<sup>+</sup> vs. FoxP3<sup>+</sup></th></tr><tr><th rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">T_A</td><td rowspan="1" colspan="1">0.584 - 0.938 - <bold>0.941</bold></td><td rowspan="1" colspan="1">0.672 - <bold>0.994</bold> - 0.988</td><td rowspan="1" colspan="1">0.669 - <bold>0.894</bold> - 0.856</td><td rowspan="1" colspan="1">0.486 - <bold>0.896</bold> - 0.886</td></tr><tr><td rowspan="1" colspan="1">T_B</td><td rowspan="1" colspan="1">0.794 - 0.917 - <bold>0.922</bold></td><td rowspan="1" colspan="1">0.88 - <bold>0.992</bold> - <bold>0.992</bold></td><td rowspan="1" colspan="1">0.54 - 0.943 - <bold>0.962</bold></td><td rowspan="1" colspan="1">0.568 - 0.921 - <bold>0.940</bold></td></tr><tr><td rowspan="1" colspan="1">T_C</td><td rowspan="1" colspan="1">0.723 - <bold>0.947</bold> - 0.904</td><td rowspan="1" colspan="1">0.7 - <bold>0.884</bold> - 0.859</td><td rowspan="1" colspan="1">0.605 - <bold>0.811</bold> - 0.699</td><td rowspan="1" colspan="1">0.505 - <bold>0.842</bold> - 0.755</td></tr><tr><td rowspan="1" colspan="1">T_D</td><td rowspan="1" colspan="1">0.811 - <bold>0.960</bold> - 0.933</td><td rowspan="1" colspan="1">0.899 - <bold>0.986</bold> - 0.985</td><td rowspan="1" colspan="1">0.644 - 0.802 - <bold>0.807</bold></td><td rowspan="1" colspan="1">0.613 - 0.862 - <bold>0.874</bold></td></tr><tr><td rowspan="1" colspan="1">T_E</td><td rowspan="1" colspan="1">0.732 - <bold>0.941</bold> - 0.940</td><td rowspan="1" colspan="1">0.644 - 0.867 - <bold>0.869</bold></td><td rowspan="1" colspan="1">0.593 - <bold>0.806</bold> - 0.688</td><td rowspan="1" colspan="1">0.511 - <bold>0.842</bold> - 0.719</td></tr><tr><td rowspan="1" colspan="1">T_F</td><td rowspan="1" colspan="1">0.738 - 0.655 - <bold>0.933</bold></td><td rowspan="1" colspan="1">0.644 - 0.619 - <bold>0.830</bold></td><td rowspan="1" colspan="1">0.73 - 0.709 - <bold>0.850</bold></td><td rowspan="1" colspan="1">0.511 - 0.578 - <bold>0.824</bold></td></tr><tr><td rowspan="1" colspan="1">T_G</td><td rowspan="1" colspan="1">0.771 - 0.788 - <bold>0.858</bold></td><td rowspan="1" colspan="1">0.782 - 0.791 - <bold>0.904</bold></td><td rowspan="1" colspan="1">
<bold>0.675</bold> - 0.614 - 0.609</td><td rowspan="1" colspan="1">0.599 - <bold>0.673</bold> - 0.659</td></tr><tr><td rowspan="1" colspan="1">T_H</td><td rowspan="1" colspan="1">0.710 - 0.651 - <bold>0.885</bold></td><td rowspan="1" colspan="1">0.682 - 0.747 - <bold>0.955</bold></td><td rowspan="1" colspan="1">0.628 - 0.695 - <bold>0.891</bold></td><td rowspan="1" colspan="1">0.555 - 0.659 - <bold>0.845</bold></td></tr><tr><td rowspan="1" colspan="1">T_I</td><td rowspan="1" colspan="1">0.733 - <bold>0.788</bold> - 0.737</td><td rowspan="1" colspan="1">
<bold>0.758</bold> - 0.716 - 0.679</td><td rowspan="1" colspan="1">0.540 - 0.693 - <bold>0.713</bold></td><td rowspan="1" colspan="1">0.548 - <bold>0.716</bold> - 0.493</td></tr><tr><td rowspan="1" colspan="1">T_J</td><td rowspan="1" colspan="1">0.727 - 0.642 - <bold>0.767</bold></td><td rowspan="1" colspan="1">0.535 - 0.678 - <bold>0.857</bold></td><td rowspan="1" colspan="1">0.602 - 0.808 - <bold>0.868</bold></td><td rowspan="1" colspan="1">0.449 - 0.507 - <bold>0.699</bold></td></tr><tr><td rowspan="1" colspan="1">T_K</td><td rowspan="1" colspan="1">0.510 - <bold>0.872</bold> - 0.770</td><td rowspan="1" colspan="1">0.570 - 0.784 - <bold>0.816</bold></td><td rowspan="1" colspan="1">0.502 - 0.823 - <bold>0.877</bold></td><td rowspan="1" colspan="1">0.404 - 0.594 - <bold>0.635</bold></td></tr><tr><td rowspan="1" colspan="1">T_N</td><td rowspan="1" colspan="1">0.493 - 0.457 - <bold>0.570</bold></td><td rowspan="1" colspan="1">0.512 - <bold>0.658</bold> - 0.632</td><td rowspan="1" colspan="1">0.577 - 0.507 - <bold>0.760</bold></td><td rowspan="1" colspan="1">0.342 - <bold>0.462</bold> - 0.370</td></tr><tr><td rowspan="1" colspan="1">T_O</td><td rowspan="1" colspan="1">
<bold>0.948</bold> - 0.830 - 0.840</td><td rowspan="1" colspan="1">
<bold>0.788</bold> - 0.602 - 0.754</td><td rowspan="1" colspan="1">0.532 - 0.484 - <bold>0.598</bold></td><td rowspan="1" colspan="1">0.550 - 0.431 - <bold>0.615</bold></td></tr></tbody></table></table-wrap><table-wrap position="float" id="tbl2"><label>Table 2:</label><caption><p>Average classification accuracy for the rLDA classifier using as input MLP, ECC, or ECP. Data for each tumor are split into 80/20 train&#x02013;test splits and classification accuracy is reported as the mean over 100 repetitions of splitting, training, and testing.</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">CD68<sup>+</sup> vs. FoxP3<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. FoxP3<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. CD68<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. CD68<sup>+</sup> vs. FoxP3<sup>+</sup></th></tr><tr><th rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">T_A</td><td rowspan="1" colspan="1">0.491 - <bold>0.967</bold> - 0.964</td><td rowspan="1" colspan="1">0.642 - <bold>0.973</bold> - 0.967</td><td rowspan="1" colspan="1">0.630 - <bold>0.840</bold> - 0.830</td><td rowspan="1" colspan="1">0.427 - 0.858 - <bold>0.859</bold></td></tr><tr><td rowspan="1" colspan="1">T_B</td><td rowspan="1" colspan="1">0.760 - <bold>0.892</bold> - 0.869</td><td rowspan="1" colspan="1">0.787 - <bold>0.986</bold> - 0.985</td><td rowspan="1" colspan="1">0.671 - 0.942 - <bold>0.945</bold></td><td rowspan="1" colspan="1">0.604 - <bold>0.868</bold> - 0.865</td></tr><tr><td rowspan="1" colspan="1">T_C</td><td rowspan="1" colspan="1">0.863 - <bold>0.906</bold> - 0.896</td><td rowspan="1" colspan="1">0.747 - <bold>0.847</bold> - 0.842</td><td rowspan="1" colspan="1">
<bold>0.653</bold> - 0.584 - 0.614</td><td rowspan="1" colspan="1">
<bold>0.640</bold> - 0.628 - 0.627</td></tr><tr><td rowspan="1" colspan="1">T_D</td><td rowspan="1" colspan="1">0.683 - <bold>0.926</bold> - 0.918</td><td rowspan="1" colspan="1">0.829 - <bold>0.990</bold> - 0.988</td><td rowspan="1" colspan="1">0.476 - <bold>0.779</bold> - <bold>0.779</bold></td><td rowspan="1" colspan="1">0.492 - <bold>0.779</bold> - 0.775</td></tr><tr><td rowspan="1" colspan="1">T_E</td><td rowspan="1" colspan="1">0.820 - <bold>0.886</bold> - 0.883</td><td rowspan="1" colspan="1">0.736 - <bold>0.929</bold> - 0.920</td><td rowspan="1" colspan="1">0.534 - 0.735 - <bold>0.743</bold></td><td rowspan="1" colspan="1">0.502 - <bold>0.702</bold> - 0.683</td></tr><tr><td rowspan="1" colspan="1">T_F</td><td rowspan="1" colspan="1">0.623 - 0.899 - <bold>0.925</bold></td><td rowspan="1" colspan="1">0.476 - 0.842 - <bold>0.847</bold></td><td rowspan="1" colspan="1">0.765 - 0.909 - <bold>0.921</bold></td><td rowspan="1" colspan="1">0.408 - 0.845 - <bold>0.847</bold></td></tr><tr><td rowspan="1" colspan="1">T_G</td><td rowspan="1" colspan="1">0.886 - <bold>0.932</bold> - 0.927</td><td rowspan="1" colspan="1">0.897 - 0.970 - <bold>0.975</bold></td><td rowspan="1" colspan="1">0.446 - <bold>0.696</bold> - 0.692</td><td rowspan="1" colspan="1">0.581 - 0.738 - <bold>0.746</bold></td></tr><tr><td rowspan="1" colspan="1">T_H</td><td rowspan="1" colspan="1">0.524 - 0.890 - <bold>0.898</bold></td><td rowspan="1" colspan="1">0.735 - <bold>0.930</bold> - 0.929</td><td rowspan="1" colspan="1">0.714 - <bold>0.882</bold> - 0.877</td><td rowspan="1" colspan="1">0.502 - 0.844 - <bold>0.859</bold></td></tr><tr><td rowspan="1" colspan="1">T_I</td><td rowspan="1" colspan="1">0.859 - 0.912 - <bold>0.931</bold></td><td rowspan="1" colspan="1">0.883 - 0.908 - <bold>0.909</bold></td><td rowspan="1" colspan="1">0.484 - 0.470 - <bold>0.474</bold></td><td rowspan="1" colspan="1">0.597 - <bold>0.619</bold> - 0.614</td></tr><tr><td rowspan="1" colspan="1">T_J</td><td rowspan="1" colspan="1">0.608 - <bold>0.763</bold> - 0.750</td><td rowspan="1" colspan="1">0.750 - 0.835 - <bold>0.872</bold></td><td rowspan="1" colspan="1">0.850 - 0.882 - <bold>0.892</bold></td><td rowspan="1" colspan="1">0.536 - 0.653 - <bold>0.670</bold></td></tr><tr><td rowspan="1" colspan="1">T_K</td><td rowspan="1" colspan="1">0.376 - <bold>0.868</bold> - 0.804</td><td rowspan="1" colspan="1">0.523 - <bold>0.918</bold> - 0.914</td><td rowspan="1" colspan="1">0.455 - <bold>0.857</bold> - 0.845</td><td rowspan="1" colspan="1">0.261 - <bold>0.718</bold> - 0.679</td></tr><tr><td rowspan="1" colspan="1">T_N</td><td rowspan="1" colspan="1">0.410 - 0.527 - <bold>0.563</bold></td><td rowspan="1" colspan="1">0.432 - 0.662 - <bold>0.745</bold></td><td rowspan="1" colspan="1">0.643 - 0.690 - <bold>0.713</bold></td><td rowspan="1" colspan="1">0.294 - 0.388 - <bold>0.460</bold></td></tr><tr><td rowspan="1" colspan="1">T_O</td><td rowspan="1" colspan="1">0.702 - <bold>0.954</bold> - 0.952</td><td rowspan="1" colspan="1">0.644 - <bold>0.806</bold> - 0.772</td><td rowspan="1" colspan="1">0.546 - 0.672 - <bold>0.684</bold></td><td rowspan="1" colspan="1">0.429 - <bold>0.639</bold> - 0.632</td></tr></tbody></table></table-wrap><table-wrap position="float" id="tbl3"><label>Table 3:</label><caption><p>Average classification accuracy for the rQDA classifier using as input MLP, ECC, or ECP. Data for each tumor are split into 80/20 train&#x02013;test splits and classification accuracy is reported as the mean over 100 repetitions of splitting, training, and testing.</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">CD68<sup>+</sup> vs. FoxP3<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. FoxP3<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. CD68<sup>+</sup></th><th align="center" rowspan="1" colspan="1">CD8<sup>+</sup> vs. CD68<sup>+</sup> vs. FoxP3<sup>+</sup></th></tr><tr><th rowspan="1" colspan="1"/><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th><th align="center" rowspan="1" colspan="1">MPL - ECC - ECP</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">T_A</td><td rowspan="1" colspan="1">0.503 - <bold>0.945</bold> - 0.931</td><td rowspan="1" colspan="1">0.598 - <bold>0.840</bold> - 0.838</td><td rowspan="1" colspan="1">0.598 - <bold>0.840</bold> - 0.838</td><td rowspan="1" colspan="1">0.380 - <bold>0.865</bold> - 0.861</td></tr><tr><td rowspan="1" colspan="1">T_B</td><td rowspan="1" colspan="1">0.738 - <bold>0.896</bold> - 0.867</td><td rowspan="1" colspan="1">0.588 - <bold>0.913</bold> - 0.911</td><td rowspan="1" colspan="1">0.588 - <bold>0.913</bold> - 0.911</td><td rowspan="1" colspan="1">0.531 - <bold>0.871</bold> - 0.869</td></tr><tr><td rowspan="1" colspan="1">T_C</td><td rowspan="1" colspan="1">0.855 - <bold>0.915</bold> - 0.906</td><td rowspan="1" colspan="1">0.673 - 0.552 - <bold>0.568</bold></td><td rowspan="1" colspan="1">0.673 - 0.552 - <bold>0.568</bold></td><td rowspan="1" colspan="1">0.614 - 0.627 - <bold>0.640</bold></td></tr><tr><td rowspan="1" colspan="1">T_D</td><td rowspan="1" colspan="1">0.554 - <bold>0.934</bold> - 0.929</td><td rowspan="1" colspan="1">0.494 - <bold>0.767</bold> - 0.755</td><td rowspan="1" colspan="1">0.494 - <bold>0.767</bold> - 0.755</td><td rowspan="1" colspan="1">0.482 - 0.786 - <bold>0.787</bold></td></tr><tr><td rowspan="1" colspan="1">T_E</td><td rowspan="1" colspan="1">0.826 - <bold>0.876</bold> - 0.871</td><td rowspan="1" colspan="1">0.548 - 0.751 - <bold>0.754</bold></td><td rowspan="1" colspan="1">0.548 - 0.751 - <bold>0.754</bold></td><td rowspan="1" colspan="1">0.499 - <bold>0.754</bold> - 0.724</td></tr><tr><td rowspan="1" colspan="1">T_F</td><td rowspan="1" colspan="1">0.646 - <bold>0.964</bold> - 0.963</td><td rowspan="1" colspan="1">0.666 - 0.853 - <bold>0.855</bold></td><td rowspan="1" colspan="1">0.666 - 0.853 - <bold>0.855</bold></td><td rowspan="1" colspan="1">0.412 - <bold>0.881</bold> - 0.878</td></tr><tr><td rowspan="1" colspan="1">T_G</td><td rowspan="1" colspan="1">0.882 - <bold>0.937</bold> - 0.928</td><td rowspan="1" colspan="1">0.485 - <bold>0.723</bold> - 0.699</td><td rowspan="1" colspan="1">0.485 - <bold>0.723</bold> - 0.699</td><td rowspan="1" colspan="1">0.583 - <bold>0.771</bold> - 0.767</td></tr><tr><td rowspan="1" colspan="1">T_H</td><td rowspan="1" colspan="1">0.621 - 0.968 - <bold>0.967</bold></td><td rowspan="1" colspan="1">0.699 - 0.886 - <bold>0.898</bold></td><td rowspan="1" colspan="1">0.699 - 0.886 - <bold>0.898</bold></td><td rowspan="1" colspan="1">0.550 - 0.889 - <bold>0.901</bold></td></tr><tr><td rowspan="1" colspan="1">T_I</td><td rowspan="1" colspan="1">0.919 - 0.928 - <bold>0.940</bold></td><td rowspan="1" colspan="1">0.493 - <bold>0.531</bold> - 0.527</td><td rowspan="1" colspan="1">0.493 - <bold>0.531</bold> - 0.527</td><td rowspan="1" colspan="1">
<bold>0.626</bold> - 0.621 - 0.624</td></tr><tr><td rowspan="1" colspan="1">T_J</td><td rowspan="1" colspan="1">0.588 - <bold>0.908</bold> - 0.903</td><td rowspan="1" colspan="1">0.860 - 0.898 - <bold>0.902</bold></td><td rowspan="1" colspan="1">0.860 - 0.898 - <bold>0.902</bold></td><td rowspan="1" colspan="1">0.541 - <bold>0.720</bold> - 0.719</td></tr><tr><td rowspan="1" colspan="1">T_K</td><td rowspan="1" colspan="1">0.468 - <bold>0.874</bold> - 0.838</td><td rowspan="1" colspan="1">0.567 - <bold>0.923</bold> - 0.903</td><td rowspan="1" colspan="1">0.567 - <bold>0.923</bold> - 0.903</td><td rowspan="1" colspan="1">0.352 - <bold>0.751</bold> - 0.736</td></tr><tr><td rowspan="1" colspan="1">T_N</td><td rowspan="1" colspan="1">0.353 - 0.453 - <bold>0.477</bold></td><td rowspan="1" colspan="1">0.510 - <bold>0.617</bold> - 0.600</td><td rowspan="1" colspan="1">0.510 - <bold>0.617</bold> - 0.600</td><td rowspan="1" colspan="1">0.334 - <bold>0.392</bold> - 0.384</td></tr><tr><td rowspan="1" colspan="1">T_O</td><td rowspan="1" colspan="1">0.724 - 0.972 - <bold>0.984</bold></td><td rowspan="1" colspan="1">0.524 - <bold>0.668</bold> - 0.662</td><td rowspan="1" colspan="1">0.524 - <bold>0.668</bold> - 0.662</td><td rowspan="1" colspan="1">0.440 - 0.730 - <bold>0.738</bold></td></tr></tbody></table></table-wrap></sec><sec id="sec7-3"><title>Prostate cancer histology slides</title><p>Lawson et&#x000a0;al. [<xref rid="bib33" ref-type="bibr">33</xref>] demonstrated that persistent homology can successfully be used to evaluate features in prostate cancer hmatoxylin and eosin (H&#x00026;E)&#x02013;stained slides. Their dataset, available in the Open Science Framework [<xref rid="bib34" ref-type="bibr">34</xref>], contains 5,182 RGB images of a resolution 512 &#x000d7; 512 corresponding to different regions of interest (ROIs) in prostate cancer H&#x00026;E slices obtained from 39 patients. Each image is labeled with a Gleason score of 3, 4, or 5 indicating the architectural patterns of the cancer. A higher Gleason score indicates an increasing level of cancer aggressiveness. The datasets contains 2,567 grade 3 ROIs, 2,351 grade 4 ROIs, but only 264 grade 5 ROIs. Given the imbalance in the data, we decided to consider a classification problem between grades 3 and 4.</p><p>Following the procedure described by the authors, we normalized and extracted the H&#x00026;E color channel from each ROI. By doing so, we converted each RGB image into a bidimensional (H&#x00026;E) one (Fig. <xref rid="fig16" ref-type="fig">16</xref>). We first computed the ECC for each of the grayscale images corresponding to the hematoxylin channel as it is the color that highlights cell nuclei. We then also used the eosin color channel to obtain a 2-dimensional ECP (Fig. <xref rid="fig17" ref-type="fig">17</xref>). We input either the ECCs or the ECPs into an support vector machine [<xref rid="bib35" ref-type="bibr">35</xref>] classifier and computed the mean test accuracy over 100 rounds with a 80/20 training split. The results are displayed in Table&#x000a0;<xref rid="tbl4" ref-type="table">4</xref>. The classifier using as input the 2-dimensional ECPs is consistently performing better than the one using the 1-dimensional ECCs.</p><table-wrap position="float" id="tbl4"><label>Table 4:</label><caption><p>Mean test accuracy for the Gleason 3&#x000a0;vs. Gleason 4 classification using ECCs or ECPs as input to a support vector machine classifier</p></caption><table frame="hsides" rules="groups"><thead><tr><th rowspan="1" colspan="1">Hematoxylin ECC</th><th align="center" rowspan="1" colspan="1">H&#x00026;E ECP</th></tr></thead><tbody><tr><td rowspan="1" colspan="1">0.765 &#x000b1; 0.001</td><td rowspan="1" colspan="1">0.826 &#x000b1; 0.001</td></tr></tbody></table></table-wrap></sec></sec><sec sec-type="conclusions" id="sec8"><title>Conclusions</title><p>Euler characteristic curves and profiles provide a stable summary of the shape of data. Unlike other summaries used in topological data analysis, this one can be computed in a distributed fashion and hence is applicable to deal with big data problems. In addition, we show, contrary to a common misconception, that the Euler characteristic curves and profiles enjoy certain type of stability. We confirm it when using them to discriminate various toy datasets with varying levels of noise. We also show how to compare and vectorize the Euler characteristic curves and profiles and apply them to a number of real data analysis problems. The presented results are accompanied with efficient Python implementation. For example, on modern commodity hardware, our implementation for V-R complexes can handle a number of simplices on the order of 10<sup>10</sup>. This is a 2-order magnitude more than what can be achieved using available software like GUDHI [<xref rid="bib9" ref-type="bibr">9</xref>]. With this work, we hope that the machinery of Euler characteristic curves and profiles will be useful for practitioners in topological data analysis.</p></sec><sec sec-type="supplementary-material"><title>Supplementary Material</title><supplementary-material id="sup1" position="float" content-type="local-data"><label>giad094_GIGA-D-23-00240_Original_Submission</label><media xlink:href="giad094_giga-d-23-00240_original_submission.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material><supplementary-material id="sup2" position="float" content-type="local-data"><label>giad094_GIGA-D-23-00240_Revision_1</label><media xlink:href="giad094_giga-d-23-00240_revision_1.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material><supplementary-material id="sup3" position="float" content-type="local-data"><label>giad094_GIGA-D-23-00240_Revision_2</label><media xlink:href="giad094_giga-d-23-00240_revision_2.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material><supplementary-material id="sup4" position="float" content-type="local-data"><label>giad094_Response_to_Reviewer_Comments_Original_Submission</label><media xlink:href="giad094_response_to_reviewer_comments_original_submission.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material><supplementary-material id="sup5" position="float" content-type="local-data"><label>giad094_Response_to_Reviewer_Comments_Revision_1</label><media xlink:href="giad094_response_to_reviewer_comments_revision_1.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material><supplementary-material id="sup6" position="float" content-type="local-data"><label>giad094_Reviewer_1_Report_Original_Submission</label><caption><p>Fan Wang, Ph.D -- 9/9/2023</p></caption><media xlink:href="giad094_reviewer_1_report_original_submission.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material><supplementary-material id="sup7" position="float" content-type="local-data"><label>giad094_Reviewer_2_Report_Original_Submission</label><caption><p>Liam Naughton -- 9/12/2023</p></caption><media xlink:href="giad094_reviewer_2_report_original_submission.pdf"><caption><p>Click here for additional data file.</p></caption></media></supplementary-material></sec></body><back><ack id="ack1"><title>Acknowledgement</title><p>D.G. thanks Niklas Hellmer for the multiple valuable discussions and insights and Jan Felix Senge for helpful discussion on the algorithms&#x02019; time performances.</p></ack><sec id="sec9"><title>Availability of Source Code and Requirements</title><list list-type="bullet"><list-item><p>Project name: pyEulerCurves</p></list-item><list-item><p>Project homepage: <ext-link xlink:href="https://github.com/dioscuri&#x0003c;plxhyp&#x0003e;PLXHYP&#x0003c;/plxhyp&#x0003e;tda/pyEulerCurves" ext-link-type="uri">https://github.com/dioscuri&#x0003c;plxhyp&#x0003e;PLXHYP&#x0003c;/plxhyp&#x0003e;tda/pyEulerCurves</ext-link></p></list-item><list-item><p>Operating system: platform independent</p></list-item><list-item><p>Programming language: Python, C++</p></list-item><list-item><p>License: MIT</p></list-item><list-item><p>Any restrictions to use by nonacademics: none</p></list-item><list-item><p>RRID: SCR_024472</p></list-item></list><p>Jupyter notebooks to reproduce all the experiments described in this article are available in the GigaDB repository [<xref rid="bib36" ref-type="bibr">36</xref>], and the workflows are described in [<xref rid="bib37" ref-type="bibr">37</xref>].</p></sec><sec id="sec10"><title>Abbreviations</title><p>ECC: Euler characteristic curve; ECP: Euler characteristic profile; H&#x00026;E: hematoxylin and eosin; LDA: linear discriminant analysis; MPH: multiparameter persistent homology; rLDA: regularized linear discriminant analysis; rQDA: regularized quadratic discriminant analysis; TDA: topological data analysis.</p></sec><sec id="sec11"><title>Authors&#x02019; Contributions</title><p>P.D. conceived and led the project. Both authors contributed to the mathematical aspect of the work and to the designing of the algorithms. D.G. led to the development of the software implementation and carried out the experiments. Both authors contributed to the writing of the manuscript.</p></sec><sec id="sec12"><title>Funding</title><p>P.D. and D.G. acknowledge support by the Dioscuri program initiated by the Max Planck Society, jointly managed with the National Science Centre (Poland) and mutually funded by the Polish Ministry of Science and Higher Education and the German Federal Ministry of Education and Research. D.G. is also with the University of Warsaw within the Doctoral School of Exact and Natural Sciences.</p></sec><sec sec-type="data-availability" id="sec13"><title>Data Availability</title><p>Snapshots of our code and other data further supporting this work are openly available in the <italic toggle="yes">GigaScience</italic> repository, GigaDB [<xref rid="bib36" ref-type="bibr">36</xref>].</p></sec><sec sec-type="COI-statement" id="sec16"><title>Competing Interests</title><p>The authors declare that they have no competing interests.</p></sec><ref-list id="ref1"><title>References</title><ref id="bib1"><label>1.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Edelsbrunner</surname>
<given-names>H</given-names>
</string-name>, <string-name><surname>Letscher</surname><given-names>D</given-names></string-name>, <string-name><surname>Zomorodian</surname><given-names>A</given-names></string-name></person-group>. <article-title>Topological persistence and simplification</article-title>. <source>Discrete Comput Geometry</source>. <year>2002</year>;<volume>28</volume>(<issue>4</issue>):<fpage>511</fpage>&#x02013;<lpage>33</lpage>.. <pub-id pub-id-type="doi">10.1007/s00454-002-2885-2</pub-id>. </mixed-citation></ref><ref id="bib2"><label>2.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Singh</surname>
<given-names>G</given-names>
</string-name>, <string-name><surname>Memoli</surname><given-names>F</given-names></string-name>, <string-name><surname>Carlsson</surname><given-names>G</given-names></string-name></person-group>. <article-title>Topological Methods for the Analysis of High Dimensional Data Sets and 3D Object Recognition</article-title>. <publisher-loc>Eindhoven, The Netherlands</publisher-loc>: <publisher-name>The Eurographics Association</publisher-name>; <year>2007</year>. <pub-id pub-id-type="doi">10.2312/SPBG/SPBG07/091-100</pub-id>.</mixed-citation></ref><ref id="bib3"><label>3.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Edelsbrunner</surname>
<given-names>H</given-names>
</string-name>, <string-name><surname>Harer</surname><given-names>JL</given-names></string-name></person-group>. <article-title>Computational Topology: An Introduction</article-title>. <publisher-loc>Providence, RI</publisher-loc>: <publisher-name>American Mathematical Society</publisher-name>; <year>2022</year>.</mixed-citation></ref><ref id="bib4"><label>4.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Lee</surname>
<given-names>Y</given-names>
</string-name>, <string-name><surname>Barthel</surname><given-names>SD</given-names></string-name>, <string-name><surname>D&#x00142;otko</surname><given-names>P</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Quantifying similarity of pore-geometry in nanoporous materials</article-title>. <source>Nat Commun</source>. <year>2017</year>;<volume>8</volume>(<issue>1</issue>):<fpage>15396</fpage>. <pub-id pub-id-type="doi">10.1038/ncomms15396</pub-id>.<pub-id pub-id-type="pmid">28534490</pub-id></mixed-citation></ref><ref id="bib5"><label>5.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>D&#x00142;otko</surname>
<given-names>P</given-names>
</string-name>, <string-name><surname>Wanner</surname><given-names>T</given-names></string-name></person-group>. <article-title>Topological microstructure analysis using persistence landscapes</article-title>. <source>Phys D Nonl Phen</source>. <year>2016</year>;<volume>334</volume>:<fpage>60</fpage>&#x02013;<lpage>81</lpage>.. <pub-id pub-id-type="doi">10.1016/j.physd.2016.04.015</pub-id>.</mixed-citation></ref><ref id="bib6"><label>6.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Hiraoka</surname>
<given-names>Y</given-names>
</string-name>, <string-name><surname>Nakamura</surname><given-names>T</given-names></string-name>, <string-name><surname>Hirata</surname><given-names>A</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Hierarchical structures of amorphous solids characterized by persistent homology</article-title>. <source>Proc Natl Acad Sci</source>. <year>2016</year>;<volume>113</volume>(<issue>26</issue>):<fpage>7035</fpage>&#x02013;<lpage>40</lpage>.. <pub-id pub-id-type="doi">10.1073/pnas.1520877113</pub-id>.<pub-id pub-id-type="pmid">27298351</pub-id></mixed-citation></ref><ref id="bib7"><label>7.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Nicolau</surname>
<given-names>M</given-names>
</string-name>, <string-name><surname>Levine</surname><given-names>AJ</given-names></string-name>, <string-name><surname>Carlsson</surname><given-names>G</given-names></string-name></person-group>. <article-title>Topology based data analysis identifies a subgroup of breast cancers with a unique mutational profile and excellent survival</article-title>. <source>Proc Natl Acad Sci</source>. <year>2011</year>;<volume>108</volume>(<issue>17</issue>):<fpage>7265</fpage>&#x02013;<lpage>70</lpage>.. <pub-id pub-id-type="doi">10.1073/pnas.1102826108</pub-id>.<pub-id pub-id-type="pmid">21482760</pub-id></mixed-citation></ref><ref id="bib8"><label>8.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Bauer</surname>
<given-names>U</given-names>
</string-name>, <string-name><surname>Kerber</surname><given-names>M</given-names></string-name>, <string-name><surname>Reininghaus</surname><given-names>J</given-names></string-name></person-group>. <article-title>Distributed computation of persistent homology</article-title>. In: <source>2014 Proceedings of the Meeting on Algorithm Engineering and Experiments (ALENEX)</source>. <publisher-loc>Philadelphia, PA</publisher-loc>: <publisher-name>Society for Industrial and Applied Mathematics</publisher-name>; <year>2013</year>:<fpage>31</fpage>&#x02013;<lpage>8</lpage>.. <pub-id pub-id-type="doi">10.1137/1.9781611973198.4</pub-id>.</mixed-citation></ref><ref id="bib9"><label>9.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<collab>The GUDHI Project</collab>
</person-group>. <article-title>GUDHI User and Reference Manual. 3.6.0 ed</article-title>. <publisher-name>GUDHI Editorial Board</publisher-name>; <year>2022</year>. <comment>online only</comment><ext-link xlink:href="https://gudhi.inria.fr/python/latest/citation.html" ext-link-type="uri">https://gudhi.inria.fr/python/latest/citation.html</ext-link>.</mixed-citation></ref><ref id="bib10"><label>10.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Silva</surname>
<given-names>Vd</given-names>
</string-name>, <string-name><surname>Carlsson</surname><given-names>G</given-names></string-name></person-group>. <article-title>Topological estimation using witness complexes</article-title>. In: <person-group person-group-type="editor"><string-name><surname>Gross</surname><given-names>M</given-names></string-name>, <string-name><surname>Pfister</surname><given-names>H</given-names></string-name>, <string-name><surname>Alexa</surname><given-names>M</given-names></string-name>, <string-name><surname>Rusinkiewicz</surname><given-names>S</given-names></string-name></person-group>, eds. <source>SPBG&#x02019;04 Symposium on Point&#x02014;Based Graphics 2004</source>. <publisher-loc>Eindhoven, The Netherlands</publisher-loc>: <publisher-name>The Eurographics Association</publisher-name>; <year>2004</year>. <pub-id pub-id-type="doi">10.2312/SPBG/SPBG04/157-166</pub-id>.</mixed-citation></ref><ref id="bib11"><label>11.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Sheehy</surname>
<given-names>DR</given-names>
</string-name>
</person-group>. <article-title>Linear-size approximations to the vietoris&#x02013;rips filtration</article-title>. <source>Discrete Comput Geometry</source>. <year>2013</year>;<volume>49</volume>(<issue>4</issue>):<fpage>778</fpage>&#x02013;<lpage>96</lpage>.. <pub-id pub-id-type="doi">10.1007/s00454-013-9513-1</pub-id>.</mixed-citation></ref><ref id="bib12"><label>12.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Chazal</surname>
<given-names>F</given-names>
</string-name>, <string-name><surname>Fasy</surname><given-names>BT</given-names></string-name>, <string-name><surname>Lecci</surname><given-names>F</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>On the bootstrap for persistence diagrams and landscapes</article-title>. <source>Model Anal Inf Syst</source>. <year>2013</year>;<volume>20</volume>(<issue>6</issue>):<fpage>111</fpage>&#x02013;<lpage>20</lpage>.. <pub-id pub-id-type="doi">10.18255/1818-1015-2013-6-111-120</pub-id>.</mixed-citation></ref><ref id="bib13"><label>13.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Carlsson</surname>
<given-names>G</given-names>
</string-name>, <string-name><surname>de&#x000a0;Silva</surname><given-names>V</given-names></string-name></person-group>. <article-title>Zigzag Persistence</article-title>. <source>Found Comput Math</source>. <year>2010</year>;<volume>10</volume>(<issue>4</issue>):<fpage>367</fpage>&#x02013;<lpage>405</lpage>.. <pub-id pub-id-type="doi">10.1007/s10208-010-9066-0</pub-id>.</mixed-citation></ref><ref id="bib14"><label>14.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Pedregosa</surname>
<given-names>F</given-names>
</string-name>, <string-name><surname>Varoquaux</surname><given-names>G</given-names></string-name>, <string-name><surname>Gramfort</surname><given-names>A</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Scikit-learn: machine learning in Python</article-title>. <source>J Mach Learn Res</source>. <year>2011</year>;<volume>12</volume>:<fpage>2825</fpage>&#x02013;<lpage>30</lpage>.. <ext-link xlink:href="https://dl.acm.org/doi/10.5555/1953048.2078195" ext-link-type="uri">https://dl.acm.org/doi/10.5555/1953048.2078195</ext-link>.</mixed-citation></ref><ref id="bib15"><label>15.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Heiss</surname>
<given-names>T</given-names>
</string-name>, <string-name><surname>Wagner</surname><given-names>H</given-names></string-name></person-group>. Streaming algorithm for Euler characteristic curves of multidimensional images. In: <person-group person-group-type="editor"><string-name><surname>Felsberg</surname><given-names>M</given-names></string-name>, <string-name><surname>Heyden</surname><given-names>A</given-names></string-name>, <string-name><surname>Kr&#x000fc;ger</surname><given-names>N</given-names></string-name></person-group>, eds. <source>Computer Analysis of Images and Patterns. Lecture Notes in Computer Science</source>. <publisher-loc>Cham, Switzerland</publisher-loc>: <publisher-name>Springer International Publishing</publisher-name>; <year>2017</year>:<fpage>397</fpage>&#x02013;<lpage>409</lpage>.. <pub-id pub-id-type="doi">10.1007/978-3-319-64689-3_32</pub-id>.</mixed-citation></ref><ref id="bib16"><label>16.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Wang</surname>
<given-names>F</given-names>
</string-name>, <string-name><surname>Wagner</surname><given-names>H</given-names></string-name>, <string-name><surname>Chen</surname><given-names>C</given-names></string-name></person-group>. <article-title>GPU computation of the Euler characteristic curve for imaging data</article-title>. In: <person-group person-group-type="editor"><string-name><surname>Goaoc</surname><given-names>X</given-names></string-name>, <string-name><surname>Kerber</surname><given-names>M</given-names></string-name></person-group> eds. <source>38th International Symposium on Computational Geometry (SoCG 2022)</source>. <publisher-loc>Dagstuhl, Germany</publisher-loc>: <publisher-name>Schloss Dagstuhl &#x02013; Leibniz-Zentrum f&#x000fc;r Informatik</publisher-name>; <year>2022</year>, <volume>224</volume>. <pub-id pub-id-type="doi">10.4230/LIPIcs.SoCG.2022.64</pub-id>.</mixed-citation></ref><ref id="bib17"><label>17.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Roy</surname>
<given-names>A</given-names>
</string-name>, <string-name><surname>Haque</surname><given-names>RaI</given-names></string-name>, <string-name><surname>Mitra</surname><given-names>AJ</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Understanding flow features in drying droplets via Euler characteristic surfaces&#x02014;a topological tool</article-title>. <source>Phys Fluids</source>. <year>2020</year>;<volume>32</volume>(<issue>12</issue>):<fpage>123310</fpage>. <pub-id pub-id-type="doi">10.1063/5.0026807</pub-id></mixed-citation></ref><ref id="bib18"><label>18.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Beltramo</surname>
<given-names>G</given-names>
</string-name>, <string-name><surname>Skraba</surname><given-names>P</given-names></string-name>, <string-name><surname>Andreeva</surname><given-names>R</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Euler characteristic surfaces</article-title>. <source>Found Data Sci</source>. <year>2022</year>; <volume>4</volume>(<issue>4</issue>):<fpage>505</fpage>&#x02013;<lpage>536</lpage>.. <pub-id pub-id-type="doi">10.3934/fods.2021027</pub-id>.</mixed-citation></ref><ref id="bib19"><label>19.</label><mixed-citation publication-type="other">
<person-group person-group-type="author">
<string-name>
<surname>Chen</surname>
<given-names>Y</given-names>
</string-name>, <string-name><surname>Segovia-Dominguez</surname><given-names>I</given-names></string-name>, <string-name><surname>Coskunuzer</surname><given-names>B</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>TAMP-S2GCNets: coupling time-aware multipersistence knowledge representation with spatio-supra graph convolutional networks for time-series forecasting</article-title>. In: <source>International Conference on Learning Representations</source>. <year>2022</year>. <ext-link xlink:href="https://openreview.net/forum?id=wv6g8fWLX2q" ext-link-type="uri">https://openreview.net/forum?id=wv6g8fWLX2q</ext-link>.</mixed-citation></ref><ref id="bib20"><label>20.</label><mixed-citation publication-type="other">
<person-group person-group-type="author">
<string-name>
<surname>Perez</surname>
<given-names>D</given-names>
</string-name>
</person-group>. <article-title>Euler and Betti curves are stable under Wasserstein deformations of distributions of stochastic processes</article-title>. <comment>arXiv</comment>. <year>2022</year>. <comment>ArXiv:2211.12384 [math]</comment>. <pub-id pub-id-type="doi">10.48550/arXiv.2211.12384</pub-id>.</mixed-citation></ref><ref id="bib21"><label>21.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Hatcher</surname>
<given-names>A</given-names>
</string-name>
</person-group>. <article-title>Algebraic Topology</article-title>. <publisher-loc>Cambridge, UK</publisher-loc>: <publisher-name>Cambridge University Press</publisher-name>; <year>2002</year>.</mixed-citation></ref><ref id="bib22"><label>22.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Carlsson</surname>
<given-names>G</given-names>
</string-name>, <string-name><surname>Zomorodian</surname><given-names>A</given-names></string-name></person-group>. <article-title>The theory of multidimensional persistence</article-title>. <source>SCG &#x02019;07</source>. <publisher-loc>New York, NY, USA</publisher-loc>: <publisher-name>Association for Computing Machinery</publisher-name>. <year>2007</year>. <fpage>184</fpage>&#x02013;<lpage>193</lpage>.. <pub-id pub-id-type="doi">10.1145/1247069.1247105</pub-id>.</mixed-citation></ref><ref id="bib23"><label>23.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Botnan</surname>
<given-names>MB</given-names>
</string-name>, <string-name><surname>Lesnick</surname><given-names>M</given-names></string-name></person-group>. An introduction to multiparameter persistence. <publisher-name>arXiv</publisher-name>. <year>2022</year>. <ext-link xlink:href="https://doi.org/10.ArXiv:2203.14289[cs,math]" ext-link-type="uri">https://doi.org/10.ArXiv:2203.14289 [cs, math]</ext-link>. <pub-id pub-id-type="doi">10.48550/arXiv.2203.14289</pub-id>.</mixed-citation></ref><ref id="bib24"><label>24.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Chung</surname>
<given-names>YM</given-names>
</string-name>, <string-name><surname>Lawson</surname><given-names>A</given-names></string-name></person-group>. <article-title>Persistence curves: a canonical framework for summarizing persistence diagrams</article-title>. <source>Adv Comput Math</source>. <year>2022</year>;<volume>48</volume>(<issue>1</issue>):<fpage>6</fpage>. <pub-id pub-id-type="doi">10.1007/s10444-021-09893-4</pub-id>.</mixed-citation></ref><ref id="bib25"><label>25.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Chevyrev</surname>
<given-names>I</given-names>
</string-name>, <string-name><surname>Nanda</surname><given-names>V</given-names></string-name>, <string-name><surname>Oberhauser</surname><given-names>H</given-names></string-name></person-group>. <article-title>Persistence paths and signature features in topological data analysis</article-title>. <source>IEEE Trans Pattern Anal Mach Int</source>. <year>2020</year>;<volume>42</volume>(<issue>1</issue>):<fpage>192</fpage>&#x02013;<lpage>202</lpage>.. <pub-id pub-id-type="doi">10.1109/TPAMI.2018.2885516</pub-id>.</mixed-citation></ref><ref id="bib26"><label>26.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Roune</surname>
<given-names>BH</given-names>
</string-name>, <string-name><surname>de&#x000a0;Cabez&#x000f3;n</surname><given-names>ES</given-names></string-name></person-group>. <article-title>Complexity and algorithms for Euler characteristic of simplicial complexes</article-title>. <publisher-name>arXiv</publisher-name>. <year>2011</year>. <comment>ArXiv:1112.4523 [cs, math]</comment>. <pub-id pub-id-type="doi">10.48550/arXiv.1112.4523</pub-id>.</mixed-citation></ref><ref id="bib27"><label>27.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Boissonnat</surname>
<given-names>JD</given-names>
</string-name>, <string-name><surname>Maria</surname><given-names>C</given-names></string-name></person-group>. <article-title>The simplex tree: an efficient data structure for general simplicial complexes</article-title>. <source>Algorithmica</source>. <year>2014</year>;<volume>70</volume>(<issue>3</issue>):<fpage>406</fpage>&#x02013;<lpage>27</lpage>.. <pub-id pub-id-type="doi">10.1007/s00453-014-9887-3</pub-id>.</mixed-citation></ref><ref id="bib28"><label>28.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Bleile</surname>
<given-names>B</given-names>
</string-name>, <string-name><surname>Garin</surname><given-names>A</given-names></string-name>, <string-name><surname>Heiss</surname><given-names>T</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>The persistent homology of dual digital image constructions</article-title>. In: <person-group person-group-type="editor"><string-name><surname>Gasparovic</surname><given-names>E</given-names></string-name>, <string-name><surname>Robins</surname><given-names>V</given-names></string-name>, <string-name><surname>Turner</surname><given-names>K</given-names></string-name></person-group>, eds. <source>Research in Computational Topology 2. Association for Women in Mathematics Series</source>. <publisher-loc>Cham</publisher-loc>, Switzerland: <publisher-name>Springer International Publishing</publisher-name>; <year>2022</year>:<fpage>1</fpage>&#x02013;<lpage>26</lpage>.. <pub-id pub-id-type="doi">10.1007/978-3-030-95519-9_1</pub-id>.</mixed-citation></ref><ref id="bib29"><label>29.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Johnson</surname>
<given-names>M</given-names>
</string-name>, <string-name><surname>Jung</surname><given-names>JH</given-names></string-name></person-group>. <article-title>Instability of the Betti sequence for persistent homology and a stabilized version of the betti sequence</article-title>. <publisher-name>arXiv</publisher-name>. <year>2021</year>. <comment>ArXiv:2109.09218 [cs, math]</comment>. <pub-id pub-id-type="doi">10.48550/arXiv.2109.09218</pub-id>.</mixed-citation></ref><ref id="bib30"><label>30.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Vipond</surname>
<given-names>O</given-names>
</string-name>, <string-name><surname>Bull</surname><given-names>JA</given-names></string-name>, <string-name><surname>Macklin</surname><given-names>PS</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Multiparameter persistent homology landscapes identify immune cell spatial patterns in tumors</article-title>. <source>Proc Natl Acad Sci</source>. <year>2021</year>;<volume>118</volume>(<issue>41</issue>):<fpage>e2102166118</fpage>. <pub-id pub-id-type="doi">10.1073/pnas.2102166118</pub-id>.<pub-id pub-id-type="pmid">34625491</pub-id></mixed-citation></ref><ref id="bib31"><label>31.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Vipond</surname>
<given-names>O</given-names>
</string-name>, <string-name><surname>Bull</surname><given-names>JA</given-names></string-name>, <string-name><surname>Macklin</surname><given-names>PS</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Spatial patterning of immune cells</article-title>. <publisher-name>GitHub</publisher-name>. <year>2021</year>. <comment><ext-link xlink:href="https://github.com/MultiparameterTDAHistology/SpatialPatterningOfImmuneCells" ext-link-type="uri">https://github.com/MultiparameterTDAHistology/SpatialPatterningOfImmuneCells</ext-link>.</comment></mixed-citation></ref><ref id="bib32"><label>32.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Hastie</surname>
<given-names>T</given-names>
</string-name>, <string-name><surname>Tibshirani</surname><given-names>R</given-names></string-name>, <string-name><surname>Friedman</surname><given-names>J</given-names></string-name></person-group>. <article-title>The Elements of Statistical Learning</article-title>. <publisher-loc>New York, NY</publisher-loc>: <publisher-name>Springer</publisher-name>; <year>2009</year>. <pub-id pub-id-type="doi">10.1007/978-0-387-84858-7</pub-id>.</mixed-citation></ref><ref id="bib33"><label>33.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>Lawson</surname>
<given-names>P</given-names>
</string-name>, <string-name><surname>Sholl</surname><given-names>AB</given-names></string-name>, <string-name><surname>Brown</surname><given-names>JQ</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Persistent homology for the quantitative evaluation of architectural features in prostate cancer histology</article-title>. <source>Sci Rep</source>. <year>2019</year>;<volume>9</volume>(<issue>1</issue>):<fpage>1139</fpage>. <pub-id pub-id-type="doi">10.1038/s41598-018-36798-y</pub-id>.<pub-id pub-id-type="pmid">30718811</pub-id></mixed-citation></ref><ref id="bib34"><label>34.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Lawson</surname>
<given-names>P</given-names>
</string-name>, <string-name><surname>Wenk</surname><given-names>C</given-names></string-name>, <string-name><surname>Fasy</surname><given-names>BT</given-names></string-name>, <etal>et al.</etal></person-group>
<article-title>Corresponding data for &#x0201c;Persistent Homology for the Quantitative Evaluation of Architectural Features in Prostate Cancer Histology&#x0201d;</article-title>. <publisher-name>Open Science Framework</publisher-name>. <year>2020</year>. <pub-id pub-id-type="doi">10.17605/OSF.IO/K96QW</pub-id>.</mixed-citation></ref><ref id="bib35"><label>35.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>Bishop</surname>
<given-names>CM</given-names>
</string-name>, <string-name><surname>Nasrabadi</surname><given-names>NM</given-names></string-name></person-group>. <article-title>Pattern Recognition and Machine Learning</article-title>. <publisher-name>Springer</publisher-name>; <publisher-loc>New York, NY</publisher-loc>. <year>2006</year>.</mixed-citation></ref><ref id="bib36"><label>36.</label><mixed-citation publication-type="journal">
<person-group person-group-type="author">
<string-name>
<surname>D&#x00142;otko</surname>
<given-names>P</given-names>
</string-name>, <string-name><surname>Gurnari</surname><given-names>D</given-names></string-name></person-group>. <article-title>Supporting data for &#x0201c;Euler Characteristic Curves and Profiles: A Stable Shape Invariant for Big Data Problems.&#x0201d;</article-title>. <source>GigaScience Database</source>. <year>2023</year>. <ext-link xlink:href="http://dx.doi.org/5524/102459" ext-link-type="uri">http://dx.doi.org/5524/102459</ext-link>.</mixed-citation></ref><ref id="bib37"><label>37.</label><mixed-citation publication-type="book">
<person-group person-group-type="author">
<string-name>
<surname>D&#x00142;otko</surname>
<given-names>P</given-names>
</string-name>, <string-name><surname>Gurnari</surname><given-names>D</given-names></string-name></person-group>. <article-title>ECP experiments</article-title>. <publisher-name>WorkflowHub</publisher-name>. <year>2023</year>. <pub-id pub-id-type="doi">10.48546/workflowhub.workflow.576.1</pub-id>.</mixed-citation></ref></ref-list><app-group><app id="sec17"><title>Appendix&#x000a0;A.</title><sec id="sec17-1"><title>Time performance analysis</title><p>We asses the time performance of Algorithm <xref rid="alg1" ref-type="table">1</xref> by analyzing the worst-case scenario, a complete graph built from a pointcloud {<italic toggle="yes">x</italic><sub><italic toggle="yes">i</italic></sub>} <italic toggle="yes">i</italic> &#x02208; [1, <italic toggle="yes">n</italic>]. This is the worst-case scenario as it contains the maximal number of cliques (hence simplices) for a given number of vertices, namely, 2<sup><italic toggle="yes">n</italic></sup> &#x02212; 1. As discussed in the previous section, the running time will be dominated by the first vertex <italic toggle="yes">x</italic><sub>1</sub> as it has the highest number of successive neighbors. The most time-consuming operations are the ones that happen inside Algorithm <xref rid="alg2" ref-type="table">2</xref>, namely, the <sc>update filtration</sc> and <sc>update common neighbors</sc> subroutines.</p><sec id="sec17-1-1"><title>Update filtration</title><p>The extension of a <italic toggle="yes">d</italic>-clique requires checking whether 1 or more of the new introduced edges have a filtration value higher than the current <italic toggle="yes">d</italic>-clique. Comparison between floats can be done in constant time and has to be repeated <italic toggle="yes">d</italic> times. With reference to Fig.&#x000a0;<xref rid="figA1" ref-type="fig">A1</xref>, we can assign to each edge in the simplex tree a cost that depends only on the edge depth. The total sum of such cost is</p><disp-formula>
<tex-math id="TM0094" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\sum _{i=1}^n (i-1) \binom{n}{i} = 2^{n - 1} n - 2^n + 1 \quad .
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><p>In case of perfect parallelization, the cost for the first vertex only is</p><disp-formula>
<tex-math id="TM0095" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
\sum _{i=1}^{n - 1} i \binom{n - 1}{i} = 2^{n - 2} (n - 1) \quad .
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><fig position="anchor" id="figA1"><label>Figure A1:</label><caption><p>Simplex tree for a 4-clique with the update filtration cost.</p></caption><graphic xlink:href="giad094figa1" position="float"/></fig></sec><sec id="sec17-1-2"><title>Update common neighbors</title><p>Updating the list of common neighbors after a clique extension requires computing the intersection between the current list of common neighbors (with length <italic toggle="yes">m</italic><sub>1</sub>) and the list of neighbors of the newly added vertex (with length <italic toggle="yes">m</italic><sub>2</sub>). Given that such lists are ordered, their intersection can be computed in <inline-formula><tex-math id="TM0096" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathcal {O}(m_1 + m_2)$\end{document}</tex-math></inline-formula>. The total cost for this operation can be obtain recursively by observing that the number of neighbors in a clique is uniquely determined&#x02014;in this particular case&#x02014;only by the last element of the clique. For example, in Fig.&#x000a0;<xref rid="figA2" ref-type="fig">A2</xref>, the subtree spanning from <sc>ab</sc> is the same as the one spanning from <sc>b</sc>, and the one from <sc>ac</sc> is equivalent to <sc>c</sc>. The total cost for a clique of size <italic toggle="yes">n</italic> can be then expressed as twice the cost for the (<italic toggle="yes">n</italic> &#x02212; 1)&#x02014;clique plus the cost of the depth 1 edges spanning from the first vertex:</p><disp-formula>
<tex-math id="TM0097" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
c(n) &#x00026;=&#x00026; \frac{(n-1)(n-2)}{2} + 2c(n-1) + (n-1)^2 \quad ;\\
c(2) &#x00026;=&#x00026; 1 \quad .
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><p>Such recurrence has solution</p><disp-formula>
<tex-math id="TM0098" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
c(n) = \frac{1}{2} (-8 + 2^{n+3} - 5 n - 3 n^2) \quad .
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><p>In case of perfect parallelization, the cost for the first vertex only is</p><disp-formula>
<tex-math id="TM0099" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
\begin{eqnarray*}
c(n) - c(n-1) = 2^{n+1} - 3 n - 1 \quad .
\end{eqnarray*}\end{document}</tex-math>
</disp-formula><fig position="anchor" id="figA2"><label>Figure A2:</label><caption><p>Simplex tree for a 4-clique with the update common neighbors cost.</p></caption><graphic xlink:href="giad094figa2" position="float"/></fig></sec></sec><sec id="sec13-2"><title>Memory performance analysis</title><p>At each step, the algorithm needs to store in memory the local graph <italic toggle="yes">G</italic> with each edge&#x02019;s filtration value. The local graph can be stored as an adjacency matrix whose entries represent the filtration values. Moreover, we need to store the current list of simplices, the list of their filtration values, and the list of common neighbor for each simplex. Let us denote with <italic toggle="yes">V</italic> the bits needed to store an edge label (usually a <sc>uint</sc>) and with <italic toggle="yes">F</italic> the bits needed to store a filtration value (usually a <sc>float</sc>). Assuming the worst-case scenario of a fully connected graph with <italic toggle="yes">n</italic> nodes, the maximum number of simplices will be generated at dimension <inline-formula><tex-math id="TM0100" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\frac{n}{2}$\end{document}</tex-math></inline-formula> and will be <inline-formula><tex-math id="TM0101" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\binom{n}{n/2}$\end{document}</tex-math></inline-formula>. The memory cost at that step will then be <inline-formula><tex-math id="TM0102" notation="LaTeX">\documentclass[12pt]{minimal}
\usepackage{amsmath}
\usepackage{wasysym}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{upgreek}
\usepackage{mathrsfs}
\setlength{\oddsidemargin}{-69pt}
\begin{document}
$\mathcal {O}(n(n-1)F + \binom{n}{n/2}nV + \binom{n}{n/2}F) = O \left( \frac{2^n}{\sqrt{n}} (nV + F) \right)$\end{document}</tex-math></inline-formula>, where the first term is the graph cost, the second one is the cost of the list of simplices, and the list of common neighbors that we assume to have the same size due to the symmetry of the binomial coefficients, and the third one is the cost of the simplices filtration values.</p></sec></app></app-group></back></article>